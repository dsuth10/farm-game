/**
 * Sheep Business Game - PDF Export Module
 * Handles PDF report generation for game completion
 * Version 1.0
 */

class PDFExporter {
    constructor() {
        this.reportTemplate = {
            title: 'Sheep Business Game - Student Report',
            subtitle: 'Educational Math Game Results',
            footer: 'Generated by Sheep Station Manager'
        };
    }

    /**
     * Generate PDF report for completed game
     * @param {object} gameData - Complete game data
     * @returns {string} PDF content as data URL
     */
    generateGameReport(gameData) {
        try {
            const reportContent = this.createReportContent(gameData);
            return this.convertToPDF(reportContent);
        } catch (error) {
            console.error('Error generating PDF report:', error);
            return this.generateFallbackReport(gameData);
        }
    }

    /**
     * Create the report content structure
     * @param {object} gameData - Game data
     * @returns {object} Report content object
     */
    createReportContent(gameData) {
        const {
            roundHistory,
            settings,
            finalBalance,
            totalProfit,
            averageProfit,
            bestRound,
            finalFlockSize
        } = this.calculateGameStatistics(gameData);

        return {
            header: this.createReportHeader(),
            summary: this.createSummarySection(gameData),
            roundDetails: this.createRoundDetailsSection(roundHistory),
            performance: this.createPerformanceSection({
                totalProfit,
                averageProfit,
                bestRound,
                finalBalance,
                finalFlockSize
            }),
            settings: this.createSettingsSection(settings),
            footer: this.createReportFooter()
        };
    }

    /**
     * Create report header
     * @returns {string} Header HTML
     */
    createReportHeader() {
        const currentDate = new Date().toLocaleDateString('en-AU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        return `
            <div class="report-header">
                <h1>${this.reportTemplate.title}</h1>
                <h2>${this.reportTemplate.subtitle}</h2>
                <p class="report-date">Generated on: ${currentDate}</p>
            </div>
        `;
    }

    /**
     * Create summary section
     * @param {object} gameData - Game data
     * @returns {string} Summary HTML
     */
    createSummarySection(gameData) {
        const stats = this.calculateGameStatistics(gameData);
        
        return `
            <div class="report-section">
                <h3>Game Summary</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <strong>Final Balance:</strong> $${stats.finalBalance}
                    </div>
                    <div class="summary-item">
                        <strong>Total Profit:</strong> $${stats.totalProfit}
                    </div>
                    <div class="summary-item">
                        <strong>Average Profit per Round:</strong> $${stats.averageProfit.toFixed(2)}
                    </div>
                    <div class="summary-item">
                        <strong>Final Flock Size:</strong> ${stats.finalFlockSize} sheep
                    </div>
                    <div class="summary-item">
                        <strong>Best Round:</strong> Round ${stats.bestRound.roundNumber} ($${stats.bestRound.profit})
                    </div>
                    <div class="summary-item">
                        <strong>Total Rounds Completed:</strong> ${gameData.roundHistory.length}
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * Create round details section
     * @param {array} roundHistory - Round history data
     * @returns {string} Round details HTML
     */
    createRoundDetailsSection(roundHistory) {
        if (!roundHistory || roundHistory.length === 0) {
            return `
                <div class="report-section">
                    <h3>Round Details</h3>
                    <p>No rounds completed.</p>
                </div>
            `;
        }

        let roundDetailsHTML = `
            <div class="report-section">
                <h3>Round-by-Round Details</h3>
                <table class="round-table">
                    <thead>
                        <tr>
                            <th>Round</th>
                            <th>Season</th>
                            <th>Sheep Purchased</th>
                            <th>Feed Cost</th>
                            <th>Wool Income</th>
                            <th>Purchase Cost</th>
                            <th>Profit/Loss</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        roundHistory.forEach((round, index) => {
            const calculations = round.calculations;
            const feedCost = calculations.feedCost.correctAnswer || 0;
            const woolIncome = calculations.woolIncome.correctAnswer || 0;
            const purchaseCost = round.sheepPurchased * round.seasonalPrices.sheepPurchasePrice;
            const profit = round.finalProfit;

            roundDetailsHTML += `
                <tr>
                    <td>${index + 1}</td>
                    <td>${round.season.charAt(0).toUpperCase() + round.season.slice(1)}</td>
                    <td>${round.sheepPurchased}</td>
                    <td>$${feedCost}</td>
                    <td>$${woolIncome}</td>
                    <td>$${purchaseCost}</td>
                    <td class="${profit >= 0 ? 'positive' : 'negative'}">$${profit}</td>
                </tr>
            `;
        });

        roundDetailsHTML += `
                    </tbody>
                </table>
            </div>
        `;

        return roundDetailsHTML;
    }

    /**
     * Create performance analysis section
     * @param {object} performanceData - Performance statistics
     * @returns {string} Performance HTML
     */
    createPerformanceSection(performanceData) {
        const { totalProfit, averageProfit, bestRound, finalBalance, finalFlockSize } = performanceData;
        
        // Calculate performance metrics
        const profitTrend = this.calculateProfitTrend(performanceData);
        const efficiency = this.calculateEfficiency(performanceData);
        
        return `
            <div class="report-section">
                <h3>Performance Analysis</h3>
                <div class="performance-grid">
                    <div class="performance-item">
                        <h4>Profit Trend</h4>
                        <p>${profitTrend}</p>
                    </div>
                    <div class="performance-item">
                        <h4>Efficiency Rating</h4>
                        <p>${efficiency}</p>
                    </div>
                    <div class="performance-item">
                        <h4>Best Performance</h4>
                        <p>Round ${bestRound.roundNumber}: $${bestRound.profit}</p>
                    </div>
                    <div class="performance-item">
                        <h4>Average Performance</h4>
                        <p>$${averageProfit.toFixed(2)} per round</p>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * Create settings section
     * @param {object} settings - Game settings
     * @returns {string} Settings HTML
     */
    createSettingsSection(settings) {
        return `
            <div class="report-section">
                <h3>Game Settings Used</h3>
                <div class="settings-grid">
                    <div class="setting-item">
                        <strong>Starting Balance:</strong> $${settings.startingBalance || 200}
                    </div>
                    <div class="setting-item">
                        <strong>Maximum Rounds:</strong> ${settings.maxRounds || 4}
                    </div>
                    <div class="setting-item">
                        <strong>Market Difficulty:</strong> ${settings.marketDifficulty || 'medium'}
                    </div>
                    <div class="setting-item">
                        <strong>Seasonal Fluctuations:</strong> ${settings.seasonalFluctuation ? 'Enabled' : 'Disabled'}
                    </div>
                    <div class="setting-item">
                        <strong>Random Variations:</strong> ${settings.randomVariation ? 'Enabled' : 'Disabled'}
                    </div>
                    <div class="setting-item">
                        <strong>Sheep Mortality:</strong> ${settings.sheepMortality ? 'Enabled' : 'Disabled'}
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * Create report footer
     * @returns {string} Footer HTML
     */
    createReportFooter() {
        return `
            <div class="report-footer">
                <p>${this.reportTemplate.footer}</p>
                <p>This report was generated automatically for educational purposes.</p>
            </div>
        `;
    }

    /**
     * Calculate game statistics
     * @param {object} gameData - Game data
     * @returns {object} Statistics object
     */
    calculateGameStatistics(gameData) {
        const roundHistory = gameData.roundHistory || [];
        const finalBalance = gameData.balance || 0;
        const finalFlockSize = gameData.flockSize || 0;

        let totalProfit = 0;
        let bestRound = { roundNumber: 0, profit: -Infinity };

        roundHistory.forEach((round, index) => {
            totalProfit += round.finalProfit || 0;
            
            if (round.finalProfit > bestRound.profit) {
                bestRound = {
                    roundNumber: index + 1,
                    profit: round.finalProfit
                };
            }
        });

        const averageProfit = roundHistory.length > 0 ? totalProfit / roundHistory.length : 0;

        return {
            roundHistory,
            finalBalance,
            totalProfit,
            averageProfit,
            bestRound,
            finalFlockSize
        };
    }

    /**
     * Calculate profit trend
     * @param {object} performanceData - Performance data
     * @returns {string} Trend description
     */
    calculateProfitTrend(performanceData) {
        const { totalProfit, averageProfit } = performanceData;
        
        if (totalProfit > 0) {
            if (averageProfit > 50) {
                return 'Excellent - Consistent positive profits';
            } else if (averageProfit > 0) {
                return 'Good - Positive overall performance';
            }
        } else if (totalProfit === 0) {
            return 'Neutral - Broke even';
        } else {
            if (averageProfit < -50) {
                return 'Needs improvement - Significant losses';
            } else {
                return 'Learning - Small losses, room for growth';
            }
        }
        
        return 'Mixed performance';
    }

    /**
     * Calculate efficiency rating
     * @param {object} performanceData - Performance data
     * @returns {string} Efficiency description
     */
    calculateEfficiency(performanceData) {
        const { totalProfit, finalFlockSize } = performanceData;
        
        if (finalFlockSize === 0) {
            return 'No flock management';
        }
        
        const profitPerSheep = totalProfit / finalFlockSize;
        
        if (profitPerSheep > 10) {
            return 'Excellent efficiency';
        } else if (profitPerSheep > 0) {
            return 'Good efficiency';
        } else if (profitPerSheep > -10) {
            return 'Fair efficiency';
        } else {
            return 'Needs improvement';
        }
    }

    /**
     * Convert HTML content to PDF
     * @param {object} content - Report content
     * @returns {string} PDF data URL
     */
    convertToPDF(content) {
        // This is a simplified PDF generation
        // In a real implementation, you would use a library like jsPDF or html2pdf
        
        const fullHTML = this.createFullHTML(content);
        
        // For now, return a data URL that can be downloaded
        // In practice, you would use a proper PDF library
        return this.createDownloadableReport(fullHTML);
    }

    /**
     * Create full HTML document
     * @param {object} content - Report content
     * @returns {string} Complete HTML
     */
    createFullHTML(content) {
        return `
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>${this.reportTemplate.title}</title>
                <style>
                    ${this.getReportStyles()}
                </style>
            </head>
            <body>
                ${content.header}
                ${content.summary}
                ${content.roundDetails}
                ${content.performance}
                ${content.settings}
                ${content.footer}
            </body>
            </html>
        `;
    }

    /**
     * Get CSS styles for the report
     * @returns {string} CSS styles
     */
    getReportStyles() {
        return `
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
            }
            
            .report-header {
                text-align: center;
                border-bottom: 2px solid #2c5aa0;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }
            
            .report-header h1 {
                color: #2c5aa0;
                margin-bottom: 10px;
            }
            
            .report-header h2 {
                color: #666;
                font-weight: normal;
                margin-bottom: 10px;
            }
            
            .report-date {
                color: #999;
                font-style: italic;
            }
            
            .report-section {
                margin-bottom: 30px;
                page-break-inside: avoid;
            }
            
            .report-section h3 {
                color: #2c5aa0;
                border-bottom: 1px solid #ddd;
                padding-bottom: 10px;
                margin-bottom: 20px;
            }
            
            .summary-grid, .performance-grid, .settings-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
            }
            
            .summary-item, .performance-item, .setting-item {
                background: #f8f9fa;
                padding: 15px;
                border-radius: 5px;
                border-left: 4px solid #2c5aa0;
            }
            
            .round-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 15px;
            }
            
            .round-table th, .round-table td {
                border: 1px solid #ddd;
                padding: 8px;
                text-align: center;
            }
            
            .round-table th {
                background: #2c5aa0;
                color: white;
                font-weight: bold;
            }
            
            .round-table tr:nth-child(even) {
                background: #f8f9fa;
            }
            
            .positive {
                color: #27ae60;
                font-weight: bold;
            }
            
            .negative {
                color: #e74c3c;
                font-weight: bold;
            }
            
            .report-footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid #ddd;
                text-align: center;
                color: #666;
                font-size: 0.9em;
            }
            
            @media print {
                body {
                    max-width: none;
                    margin: 0;
                    padding: 15px;
                }
                
                .report-section {
                    page-break-inside: avoid;
                }
            }
        `;
    }

    /**
     * Create downloadable report
     * @param {string} htmlContent - HTML content
     * @returns {string} Downloadable content
     */
    createDownloadableReport(htmlContent) {
        // Create a blob with the HTML content
        const blob = new Blob([htmlContent], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        
        // Create download link
        const link = document.createElement('a');
        link.href = url;
        link.download = `sheep-business-game-report-${new Date().toISOString().split('T')[0]}.html`;
        
        // Trigger download
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Clean up
        URL.revokeObjectURL(url);
        
        return url;
    }

    /**
     * Generate fallback report if PDF generation fails
     * @param {object} gameData - Game data
     * @returns {string} Fallback report
     */
    generateFallbackReport(gameData) {
        const stats = this.calculateGameStatistics(gameData);
        
        let report = `${this.reportTemplate.title}\n`;
        report += `${this.reportTemplate.subtitle}\n`;
        report += `Generated on: ${new Date().toLocaleDateString()}\n\n`;
        
        report += `GAME SUMMARY:\n`;
        report += `Final Balance: $${stats.finalBalance}\n`;
        report += `Total Profit: $${stats.totalProfit}\n`;
        report += `Average Profit per Round: $${stats.averageProfit.toFixed(2)}\n`;
        report += `Final Flock Size: ${stats.finalFlockSize} sheep\n`;
        report += `Best Round: Round ${stats.bestRound.roundNumber} ($${stats.bestRound.profit})\n\n`;
        
        report += `ROUND DETAILS:\n`;
        gameData.roundHistory.forEach((round, index) => {
            report += `Round ${index + 1}: $${round.finalProfit}\n`;
        });
        
        return report;
    }

    /**
     * Export game data as JSON
     * @param {object} gameData - Game data
     * @returns {string} JSON string
     */
    exportGameData(gameData) {
        const exportData = {
            timestamp: new Date().toISOString(),
            gameData: gameData,
            statistics: this.calculateGameStatistics(gameData)
        };
        
        const jsonString = JSON.stringify(exportData, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `sheep-game-data-${new Date().toISOString().split('T')[0]}.json`;
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        URL.revokeObjectURL(url);
        
        return jsonString;
    }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PDFExporter;
} 