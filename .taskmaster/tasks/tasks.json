{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and File Structure",
        "description": "Initialize the project with the required file structure and basic HTML template according to the PRD specifications.",
        "details": "Create the following file structure:\n- index.html (main entry point)\n- css/main.css (core styling)\n- css/responsive.css (responsive design rules)\n- js/game.js (main game logic)\n- js/calculations.js (mathematical operations)\n- js/validation.js (input validation)\n- js/pdf-export.js (PDF report generation)\n- assets/ (for images and icons)\n\nThe HTML file should include the basic structure with proper semantic HTML5 elements:\n- Header section with game title\n- Main game area with sections for purchase, financial ledger\n- Controls section\n- Proper meta tags for responsive design\n- CSS and JavaScript file references\n\nImplement basic accessibility features including proper ARIA attributes and ensure the HTML structure follows best practices for screen readers.",
        "testStrategy": "Validate HTML using W3C Validator. Test initial page load in Chrome 80+, Firefox 75+, Safari 13+, and Edge 80+. Verify file structure matches PRD Appendix C. Check that all files are properly linked and accessible.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Core Game State Management",
        "description": "Implement the game state object and data structures to track game progress, seasonal data, and player actions.",
        "details": "Create the core game state management system using the data model specified in the PRD:\n\n1. Implement the gameState object with all required properties:\n   - currentRound, maxRounds, balance, flockSize\n   - seasonalPrices for all four seasons\n   - settings object for teacher controls\n   - roundHistory array for tracking progress\n\n2. Implement the roundData structure to track per-round information:\n   - Round number and season\n   - Sheep purchased and prices\n   - Calculation tracking (student answers, correct answers, attempts)\n   - Financial results\n\n3. Create functions for:\n   - Initializing a new game with default values\n   - Updating game state when moving between rounds\n   - Saving round data to history\n   - Resetting the game state\n\nUse ES6+ features like const/let, object destructuring, and arrow functions. Ensure all state changes are properly tracked and can be accessed by UI components.",
        "testStrategy": "Write unit tests to verify game state initialization with correct starting values (balance $200, sheep count 0, etc.). Test round progression logic to ensure state updates correctly. Verify that seasonal data changes appropriately between rounds. Test game reset functionality.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design and Implement Core gameState Object",
            "description": "Define and implement the main gameState object with all required properties, including currentRound, maxRounds, balance, flockSize, seasonalPrices, settings, and roundHistory, ensuring the structure matches the PRD specification.",
            "dependencies": [],
            "details": "Use ES6+ features such as const/let, object destructuring, and arrow functions. Ensure the gameState object is extensible and accessible by other modules and UI components.",
            "status": "done",
            "testStrategy": "Write unit tests to verify correct initialization of all properties with default values (e.g., balance $200, sheep count 0)."
          },
          {
            "id": 2,
            "title": "Implement roundData Structure for Per-Round Tracking",
            "description": "Create the roundData structure to capture all per-round information, including round number, season, sheep purchased, prices, calculation tracking (student answers, correct answers, attempts), and financial results.",
            "dependencies": [
              "2.1"
            ],
            "details": "Ensure roundData objects are correctly structured and integrated into the roundHistory array within gameState.",
            "status": "done",
            "testStrategy": "Test creation and storage of roundData for multiple rounds. Verify all required fields are present and accurately recorded."
          },
          {
            "id": 3,
            "title": "Develop Game Initialization and Reset Functions",
            "description": "Implement functions to initialize a new game with default values and to reset the game state, ensuring all properties and history are correctly cleared or set.",
            "dependencies": [
              "2.1"
            ],
            "details": "Initialization should set up gameState and roundHistory for a new session. Reset should restore all values to their initial state.",
            "status": "done",
            "testStrategy": "Test that initialization and reset functions correctly set all values and clear history. Verify UI reflects the reset state."
          },
          {
            "id": 4,
            "title": "Implement State Update and Round Progression Logic",
            "description": "Create functions to update the game state when moving between rounds, including incrementing currentRound, updating seasonal data, and applying player actions.",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "details": "Ensure all state changes are tracked and that seasonalPrices and other round-dependent data update appropriately.",
            "status": "done",
            "testStrategy": "Test round progression logic to ensure state updates correctly, including seasonal data changes and player action effects."
          },
          {
            "id": 5,
            "title": "Integrate Round Data Persistence and History Management",
            "description": "Implement logic to save roundData to the roundHistory array after each round and provide access methods for UI components to retrieve historical data.",
            "dependencies": [
              "2.2",
              "2.4"
            ],
            "details": "Ensure roundHistory accurately reflects all completed rounds and supports retrieval for analytics and reporting.",
            "status": "done",
            "testStrategy": "Test that round data is correctly appended to history after each round and that retrieval functions return accurate data."
          }
        ]
      },
      {
        "id": 3,
        "title": "User Interface Layout and Styling",
        "description": "Implement the responsive UI layout and styling according to the PRD specifications, ensuring compatibility across device sizes.",
        "details": "Develop the UI layout using modern CSS (Flexbox/Grid) without external dependencies:\n\n1. Implement the layout structure as specified in PRD section 3.1\n2. Create responsive designs for:\n   - Mobile (320px+): Single column stacked layout\n   - Tablet (768px+): Two-column structure\n   - Desktop: Full layout with optimal spacing\n\n3. Style components including:\n   - Header with round indicator\n   - Season display with icon\n   - Purchase section with input fields\n   - Financial ledger with tabular data\n   - Market conditions section\n   - Feedback banner\n   - Control buttons\n\n4. Implement accessibility requirements:\n   - Ensure 4.5:1 minimum contrast ratio\n   - Create color-blind friendly design with supplementary icons\n   - Set up proper tab navigation order\n\nUse CSS custom properties (variables) for consistent theming. Implement media queries for responsive breakpoints. Avoid absolute positioning where possible to maintain layout flexibility.",
        "testStrategy": "Test responsive layout on various screen sizes from 320px to 1920px width. Verify layout adapts correctly at breakpoints. Run accessibility tests using axe or similar tools to verify contrast ratios and keyboard navigation. Test with screen readers to ensure proper ARIA implementation. Verify color-blind friendly design using simulators.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Game Initialization and Round Structure",
        "description": "Implement the game initialization process and round structure flow as specified in the PRD.",
        "details": "Create the game initialization and round structure logic:\n\n1. Game Initialization:\n   - Set starting balance to $200\n   - Set initial sheep count to 0\n   - Display round indicator (1 of 4)\n   - Clear and enable all input fields\n   - Set initial season (Spring)\n\n2. Round Structure Implementation:\n   - Create functions for each phase of the round:\n     * Purchase Phase: Allow sheep quantity selection (0-20)\n     * Cost Calculation: Housing costs calculation\n     * Feed Calculation: Feed costs calculation\n     * Income Calculation: Wool income calculation\n     * Profit Calculation: Net profit/loss computation\n     * Validation: Feedback on calculations\n     * Advancement: Progress to next round\n\n3. Implement round transition logic:\n   - Save current round data\n   - Update season and prices\n   - Reset input fields\n   - Update UI elements\n\nEnsure proper event handling for user interactions and implement validation for user inputs (e.g., sheep quantity must be 0-20).",
        "testStrategy": "Test game initialization to verify correct starting values. Verify each phase of the round structure works as expected. Test round transitions to ensure proper state updates and UI refreshes. Validate input constraints are enforced. Test the complete game flow from start to finish through all 4 rounds.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Seasonal Price Management",
        "description": "Implement the seasonal price management system with dynamic updates and visual indicators for price changes.",
        "details": "Create the seasonal price management system:\n\n1. Implement the seasonal price data structure as defined in the PRD:\n   - Spring, Summer, Autumn, Winter price sets\n   - Wool price, feed cost, housing cost, sheep purchase price\n   - Market condition descriptions\n\n2. Create functions to:\n   - Update prices when seasons change\n   - Calculate and display price changes (↑↓)\n   - Apply teacher settings for price fluctuations\n   - Implement random price variations (±$3) when enabled\n   - Apply market difficulty modifiers (Easy/Medium/Hard)\n\n3. Develop UI components for price display:\n   - Current season indicator with icon\n   - Price change indicators\n   - Market condition tooltips\n   - Market trends button and historical data view\n\nUse the seasonal market patterns from Appendix D to inform the implementation. Ensure price changes are visually highlighted to draw student attention to market fluctuations.",
        "testStrategy": "Test seasonal price updates between rounds. Verify price change indicators display correctly. Test random price variations when enabled. Verify market difficulty settings affect price ranges appropriately. Test the market trends display for historical data accuracy. Validate that all price-related UI elements update correctly when seasons change.",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Calculation Engine Implementation",
        "description": "Develop the core calculation engine to handle all mathematical operations and validations for the game.",
        "details": "Implement the calculation engine that powers the game's mathematical operations:\n\n1. Create functions for all required calculations:\n   - Purchase cost: quantity × sheep price\n   - Housing cost: quantity × housing cost\n   - Feed cost: quantity × feed cost\n   - Wool income: quantity × wool price\n   - Profit calculation: income - (housing + feed + purchase)\n\n2. Implement validation logic:\n   - Compare student answers with correct calculations\n   - Track attempt counts for each calculation\n   - Generate appropriate feedback messages\n   - Create worked examples after 2 incorrect attempts\n   - Implement auto-fill with $10 penalty after 5 attempts\n\n3. Develop helper functions for:\n   - Formatting currency values\n   - Calculating running totals\n   - Tracking calculation history\n\nEnsure all calculations handle edge cases (zero sheep, maximum sheep) correctly. Use precise decimal arithmetic to avoid floating-point errors in financial calculations.",
        "testStrategy": "Create unit tests for each calculation function using test cases from Appendix A. Verify validation logic correctly identifies correct/incorrect answers. Test the worked example generation. Verify penalty application after 5 attempts. Test edge cases including zero sheep and maximum sheep quantities. Ensure currency formatting is consistent.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "User Input and Validation System",
        "description": "Implement the user input system with real-time validation and feedback mechanisms.",
        "details": "Create the user input and validation system:\n\n1. Implement input fields for:\n   - Sheep quantity selection (0-20)\n   - Housing cost calculation\n   - Feed cost calculation\n   - Wool income calculation\n   - Profit calculation\n\n2. Develop validation logic:\n   - Real-time validation on submission\n   - Green visual feedback for correct answers\n   - Red visual feedback with guidance for incorrect answers\n   - Worked example display after 2 incorrect attempts\n   - Auto-fill with penalty after 5 incorrect attempts\n\n3. Create feedback components:\n   - Dynamic feedback banner\n   - Validation indicators next to each input\n   - Worked example modal/popup\n   - Error message display\n\nImplement proper input constraints (numeric only, appropriate ranges). Use event listeners to capture user input and trigger validation. Ensure keyboard accessibility for all input operations.",
        "testStrategy": "Test input validation with correct and incorrect values. Verify appropriate feedback is displayed. Test the worked example display after 2 incorrect attempts. Verify auto-fill functionality after 5 attempts. Test keyboard navigation through input fields. Verify input constraints are enforced correctly.",
        "priority": "high",
        "dependencies": [
          3,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Financial Ledger and Progress Tracking",
        "description": "Implement the financial ledger to track and display income, expenses, and profit throughout the game.",
        "details": "Develop the financial ledger and progress tracking system:\n\n1. Create the financial ledger UI component:\n   - Tabular display of income and expenses\n   - Running totals for each category\n   - Current balance display\n   - Profit/loss indicators\n\n2. Implement data tracking for:\n   - Purchase costs per round\n   - Housing costs per round\n   - Feed costs per round\n   - Wool income per round\n   - Net profit/loss per round\n   - Cumulative balance\n\n3. Develop the profit chart visualization:\n   - Round-by-round profit/loss display\n   - Visual trend indicators\n   - Seasonal markers\n\nUse a simple chart implementation without external libraries. Update the ledger dynamically as calculations are completed. Ensure all financial data is properly formatted as currency.",
        "testStrategy": "Test ledger updates after each calculation. Verify running totals are calculated correctly. Test the profit chart visualization with various game scenarios. Verify currency formatting is consistent. Test edge cases like negative profits and balance changes.",
        "priority": "medium",
        "dependencies": [
          4,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Teacher Settings Panel",
        "description": "Implement the teacher settings panel with configuration options for game parameters and difficulty.",
        "details": "Create the teacher settings panel with all required controls:\n\n1. Implement toggle switches for:\n   - Seasonal price fluctuations (enabled by default)\n   - Random price variations (±$3 per season)\n   - Sheep mortality events (5% chance per round)\n\n2. Create input controls for:\n   - Adjustable starting balance (default $200)\n   - Adjustable maximum rounds (default 4)\n\n3. Implement selector controls for:\n   - Market difficulty (Easy/Medium/Hard)\n   - Seasonal cycle speed (1-4 rounds per season)\n\n4. Develop the settings persistence:\n   - Apply settings to new game instances\n   - Reset to defaults option\n\nImplement a modal/panel design that can be toggled open/closed. Add appropriate labels and help text for each setting. Ensure settings are applied correctly when a new game is started.",
        "testStrategy": "Test each setting to verify it affects gameplay as expected. Verify toggles for seasonal fluctuations, random variations, and mortality events work correctly. Test input validation for starting balance and maximum rounds. Verify market difficulty settings affect price ranges. Test that settings persist when applied and reset correctly when defaults are restored.",
        "priority": "medium",
        "dependencies": [
          2,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Analytics and PDF Report Generation",
        "description": "Implement the analytics tracking system and PDF report generation functionality.",
        "details": "Develop the analytics and reporting system:\n\n1. Implement analytics tracking for:\n   - Calculation attempts (correct/incorrect)\n   - Round-by-round profit/loss data\n   - Game completion statistics\n\n2. Create the PDF report generation functionality:\n   - Generate summary at game completion\n   - Include round-by-round data\n   - Format financial results\n   - Display calculation accuracy statistics\n\n3. Develop data visualization for the report:\n   - Profit/loss chart\n   - Calculation accuracy metrics\n   - Game performance summary\n\nUse the jsPDF library (or similar lightweight alternative) for PDF generation. Ensure the report is formatted for easy printing. Include teacher-focused insights in the report.",
        "testStrategy": "Test analytics tracking to verify data collection. Generate test PDF reports and verify content accuracy. Test PDF generation across supported browsers. Verify report formatting is consistent and printable. Test with various game scenarios to ensure all data is captured correctly.",
        "priority": "low",
        "dependencies": [
          6,
          8
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Market Trends and Historical Data Display",
        "description": "Implement the market trends feature to display historical price data and seasonal patterns.",
        "details": "Create the market trends and historical data display:\n\n1. Implement the market trends button and panel:\n   - Historical price data table\n   - Season-by-season comparison\n   - Price change visualization\n\n2. Develop data tracking for:\n   - Historical prices across all seasons\n   - Price change percentages\n   - Market condition descriptions\n\n3. Create visual components for:\n   - Price trend charts\n   - Seasonal comparison view\n   - Market condition explanations\n\nDesign the trends display as a modal/panel that can be opened on demand. Include helpful explanations of market patterns to guide student decision-making. Use the seasonal market patterns from Appendix D to inform the implementation.",
        "testStrategy": "Test the market trends button and panel display. Verify historical price data is accurate. Test the trends display with various game scenarios and settings. Verify seasonal comparisons are displayed correctly. Test the modal/panel open/close functionality.",
        "priority": "medium",
        "dependencies": [
          5,
          8
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Game Completion and Summary Screen",
        "description": "Implement the game completion logic and summary screen to display final results.",
        "details": "Develop the game completion and summary functionality:\n\n1. Implement game completion logic:\n   - Detect when maximum rounds are reached\n   - Calculate final balance and profit/loss\n   - Generate game performance metrics\n\n2. Create the summary screen with:\n   - Final balance display\n   - Round-by-round profit/loss summary\n   - Calculation accuracy statistics\n   - Performance feedback messages\n\n3. Implement action buttons for:\n   - Play again (reset game)\n   - View detailed report\n   - Generate PDF report\n\nDesign an engaging summary screen that celebrates student achievement. Include educational feedback based on performance. Ensure the summary provides clear insights into the student's mathematical performance.",
        "testStrategy": "Test game completion detection after final round. Verify summary screen displays with accurate data. Test the play again functionality. Verify detailed report and PDF generation options work correctly. Test with various game scenarios to ensure all summary data is accurate.",
        "priority": "medium",
        "dependencies": [
          4,
          8,
          10
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Accessibility Implementation",
        "description": "Implement comprehensive accessibility features to ensure the game is usable by all students.",
        "details": "Enhance the application with comprehensive accessibility features:\n\n1. Implement keyboard navigation:\n   - Logical tab order for all interactive elements\n   - Keyboard shortcuts for common actions\n   - Focus indicators for active elements\n\n2. Add screen reader support:\n   - ARIA labels for all inputs and controls\n   - Descriptive alt text for images\n   - Semantic HTML structure\n   - Status announcements for game events\n\n3. Enhance visual accessibility:\n   - High contrast mode option\n   - Color-blind friendly design (supplement red/green with icons/text)\n   - Adjustable text size option\n   - Minimum contrast ratio of 4.5:1 for all text\n\nTest with screen readers (NVDA, VoiceOver) to ensure proper navigation. Implement WCAG 2.1 AA compliance standards throughout the application.",
        "testStrategy": "Test keyboard navigation through all interactive elements. Verify screen reader compatibility using NVDA and VoiceOver. Test color contrast using accessibility tools. Verify color-blind friendly design using simulators. Test with various accessibility settings enabled. Validate against WCAG 2.1 AA standards.",
        "priority": "high",
        "dependencies": [
          3,
          7
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Performance Optimization",
        "description": "Optimize the application for performance to meet the technical requirements specified in the PRD.",
        "details": "Implement performance optimizations to meet technical requirements:\n\n1. Optimize load time:\n   - Minify CSS and JavaScript\n   - Optimize image assets\n   - Implement efficient DOM operations\n   - Reduce initial payload size\n\n2. Optimize runtime performance:\n   - Use efficient event delegation\n   - Minimize DOM reflows and repaints\n   - Implement debouncing for input validation\n   - Optimize calculation operations\n\n3. Reduce memory usage:\n   - Implement proper garbage collection practices\n   - Optimize data structures\n   - Limit DOM node creation/destruction\n\nTarget performance metrics:\n- Load time: <2 seconds on average school WiFi\n- Bundle size: <500KB total (HTML+CSS+JS)\n- Memory usage: <50MB during gameplay",
        "testStrategy": "Measure load time on various devices and network conditions. Verify bundle size is under 500KB. Monitor memory usage during extended gameplay. Test performance on minimum supported browser versions. Conduct performance profiling using browser developer tools. Verify smooth operation on school-grade hardware.",
        "priority": "medium",
        "dependencies": [
          1,
          3,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Cross-Browser Testing and Bug Fixing",
        "description": "Conduct comprehensive cross-browser testing and fix any identified issues to ensure compatibility.",
        "details": "Perform cross-browser testing and bug fixing:\n\n1. Test on all required browsers:\n   - Chrome 80+\n   - Firefox 75+\n   - Safari 13+\n   - Edge 80+\n\n2. Test on various devices:\n   - Desktop computers\n   - Tablets\n   - Mobile devices (landscape and portrait)\n\n3. Verify functionality:\n   - Game initialization\n   - Calculation validation\n   - Seasonal transitions\n   - Teacher settings\n   - PDF generation\n   - Accessibility features\n\n4. Document and fix identified issues:\n   - Create bug tracking system\n   - Prioritize fixes based on impact\n   - Implement fixes with regression testing\n\nCreate a browser compatibility matrix documenting test results. Address any browser-specific issues with appropriate polyfills or alternative implementations.",
        "testStrategy": "Create a test matrix covering all required browsers and features. Conduct manual testing of all functionality on each browser. Use BrowserStack or similar tools for device testing. Document and track all identified issues. Verify fixes with regression testing. Conduct final validation across all supported platforms.",
        "priority": "high",
        "dependencies": [
          4,
          7,
          9,
          12,
          13,
          14
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Implement Educational Calculation Guides",
        "description": "Add step-by-step calculation guides above each required calculation field to help students understand the mathematical concepts and procedures for housing cost, feed cost, wool income, and profit calculations.",
        "details": "Implement educational calculation guides that appear above each calculation input field:\n\n1. Create a collapsible guide component for each calculation type:\n   - Housing cost guide: quantity × housing cost per sheep\n   - Feed cost guide: quantity × feed cost per sheep\n   - Wool income guide: quantity × wool price per unit\n   - Profit calculation guide: wool income - (housing cost + feed cost + purchase cost)\n\n2. For each guide, implement:\n   - Clear step-by-step instructions with mathematical notation\n   - Visual indicators showing which numbers to use from the game state\n   - Example calculations with sample numbers\n   - Explanations of the mathematical concepts (multiplication, subtraction)\n\n3. Design considerations:\n   - Guides should be initially collapsed with an \"Show Help\" button\n   - Use accessible, clear typography with sufficient contrast\n   - Include visual aids like arrows or highlighting to connect concepts\n   - Ensure guides are responsive and work on all device sizes\n   - Use simple language appropriate for the target age group (11-14)\n\n4. Integration with calculation engine:\n   - Pull current game values to show relevant examples\n   - Update guide examples when game values change\n   - Ensure guides reflect the current season's values\n\n5. Educational content:\n   - Housing cost: Explain per-unit multiplication concept\n   - Feed cost: Explain seasonal variations and multiplication\n   - Wool income: Explain revenue generation concepts\n   - Profit: Explain income minus expenses and the concept of profit/loss\n\n6. Implement appropriate animations for guide expansion/collapse to draw student attention without being distracting.",
        "testStrategy": "1. Verify guides appear correctly for each calculation type:\n   - Test that each guide contains accurate step-by-step instructions\n   - Confirm that mathematical notation is correctly displayed\n   - Verify that examples use current game values\n\n2. Test the collapsible functionality:\n   - Verify guides expand/collapse properly on all supported browsers\n   - Test keyboard accessibility for expanding/collapsing guides\n   - Confirm that screen readers announce guide content appropriately\n\n3. Test educational content accuracy:\n   - Review all mathematical explanations for correctness\n   - Verify that sample calculations produce the correct results\n   - Confirm that explanations are age-appropriate and clear\n\n4. Cross-browser and device testing:\n   - Test guide display on all required browsers (Chrome 80+, Firefox 75+, Safari 13+, Edge 80+)\n   - Verify responsive behavior on desktop, tablet, and mobile devices\n   - Test with various screen sizes to ensure content remains readable\n\n5. Accessibility testing:\n   - Verify color contrast meets WCAG standards\n   - Test screen reader compatibility for all guide content\n   - Confirm keyboard navigation works for accessing guides\n\n6. User testing:\n   - Conduct testing with sample users from the target age group\n   - Gather feedback on clarity and helpfulness of guides\n   - Make adjustments based on user feedback",
        "status": "done",
        "dependencies": [
          6,
          13
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Collapsible Guide Components for Each Calculation Type",
            "description": "Develop a collapsible guide component for each calculation field (housing cost, feed cost, wool income, profit), ensuring each is initially collapsed and can be expanded with a 'Show Help' button.",
            "dependencies": [],
            "details": "Each calculation input field should have an associated collapsible guide component. The guides must be accessible, visually distinct, and follow consistent UI patterns. Ensure the guides are responsive and compatible with all device sizes.",
            "status": "done",
            "testStrategy": "Verify that each calculation field displays a collapsed guide by default. Test the expand/collapse functionality and ensure accessibility compliance (keyboard navigation, screen reader support)."
          },
          {
            "id": 2,
            "title": "Develop Step-by-Step Educational Content for Each Guide",
            "description": "Create clear, age-appropriate step-by-step instructions for each calculation type, including mathematical notation, example calculations, and explanations of underlying concepts (multiplication, subtraction, profit/loss).",
            "dependencies": [],
            "details": "Content must use simple language suitable for ages 11-14, include visual indicators (arrows, highlights) to connect game state values to calculation steps, and provide sample calculations using realistic numbers.",
            "status": "done",
            "testStrategy": "Review each guide to ensure instructions are clear, accurate, and use correct mathematical notation. Validate that examples are relevant and explanations are age-appropriate."
          },
          {
            "id": 3,
            "title": "Integrate Real-Time Game State Values into Guides",
            "description": "Connect the guides to the game state so that example calculations dynamically update to reflect current values (e.g., sheep quantity, prices, season).",
            "dependencies": [],
            "details": "Implement logic to pull current values from the game state and update guide examples in real time. Ensure guides always display accurate, context-sensitive information for the current round and season.",
            "status": "done",
            "testStrategy": "Change game values and verify that guide examples update immediately. Test across all calculation types and seasons to ensure accuracy and responsiveness."
          },
          {
            "id": 4,
            "title": "Implement Visual and Accessibility Enhancements",
            "description": "Apply accessible, high-contrast typography and visual aids (arrows, highlights) to the guides, ensuring compliance with accessibility standards and usability for all students.",
            "dependencies": [],
            "details": "Use accessible fonts, sufficient color contrast, and ARIA labels. Visual aids should clearly connect guide steps to relevant UI elements. Ensure guides are usable with screen readers and keyboard navigation.",
            "status": "done",
            "testStrategy": "Test guides with accessibility tools (screen readers, contrast checkers). Verify that all visual aids are clear and that guides are fully navigable via keyboard."
          },
          {
            "id": 5,
            "title": "Add Animated Transitions for Guide Expansion and Collapse",
            "description": "Implement smooth, non-distracting animations for expanding and collapsing the guides to draw student attention and enhance engagement.",
            "dependencies": [],
            "details": "Animations should be subtle, quick, and not interfere with usability or accessibility. Ensure animation performance is consistent across devices and does not cause motion sensitivity issues.",
            "status": "done",
            "testStrategy": "Expand and collapse guides repeatedly to verify animation smoothness and performance. Confirm that animations do not hinder accessibility or cause discomfort for sensitive users."
          }
        ]
      },
      {
        "id": 17,
        "title": "Implement Housing System for Sheep Farm Game",
        "description": "Implement a housing system that allows players to purchase housing units at the beginning of each round, validates housing capacity against flock size, and prevents round progression if housing is insufficient.",
        "details": "Implement the housing system with the following components and functionality:\n\n1. Housing Purchase Interface:\n   - Create an input field for players to enter money amount for housing at the start of each round\n   - Add a \"Purchase Housing\" button with appropriate validation\n   - Display the current cost per housing unit (from seasonal price data)\n   - Calculate and display the number of housing units that will be purchased\n\n2. Housing Capacity Management:\n   - Add a `housingCapacity` property to the gameState object to track total housing units\n   - Implement persistence of housing capacity between rounds\n   - Create a function to calculate maximum flock size based on housing (1 unit = 1 sheep)\n   - Update the purchase phase to check housing capacity before allowing sheep purchases\n\n3. Housing Validation System:\n   - Implement validation to check if current flock size exceeds housing capacity\n   - Create warning messages for insufficient housing\n   - Block round progression if housing is inadequate\n   - Add visual indicators when housing capacity is approaching maximum\n\n4. UI Integration:\n   - Display current housing capacity and flock size in the game interface\n   - Add a housing section to the financial ledger to track housing expenses\n   - Create tooltips explaining the housing system mechanics\n   - Implement visual feedback when housing is purchased\n\n5. Game State Integration:\n   - Update the round initialization process to include housing checks\n   - Modify the sheep purchase validation to consider housing limits\n   - Add housing costs to the profit calculation\n   - Include housing data in the round history for reporting\n\n6. Educational Components:\n   - Add calculation guides for housing costs and capacity planning\n   - Create tooltips explaining the importance of housing in farm management\n   - Include housing considerations in the game instructions\n\nImplementation should follow existing code patterns and integrate with the calculation engine and validation system.",
        "testStrategy": "1. Test Housing Purchase Interface:\n   - Verify the housing purchase input accepts valid monetary values\n   - Test that the correct number of housing units is calculated based on input amount\n   - Confirm the seasonal housing cost is correctly displayed\n   - Test edge cases (zero input, maximum affordable input, invalid inputs)\n\n2. Test Housing Capacity Management:\n   - Verify housing capacity persists between rounds\n   - Test that housing capacity correctly limits sheep purchases\n   - Confirm housing capacity updates when new housing is purchased\n   - Test game initialization with different housing capacity values\n\n3. Test Validation System:\n   - Verify warnings appear when housing is insufficient\n   - Test that round progression is blocked when housing capacity is exceeded\n   - Confirm appropriate error messages are displayed\n   - Test edge cases (exactly at capacity, slightly over capacity)\n\n4. Test UI Integration:\n   - Verify housing capacity and flock size are correctly displayed\n   - Test that housing expenses are properly recorded in the financial ledger\n   - Confirm tooltips and help text are accessible and accurate\n   - Test visual feedback elements for housing purchases\n\n5. Test Game State Integration:\n   - Verify housing data is correctly stored in the game state\n   - Test that housing costs are properly included in profit calculations\n   - Confirm housing data appears in reports and round history\n   - Test game completion with various housing scenarios\n\n6. Accessibility Testing:\n   - Verify all new UI elements are keyboard navigable\n   - Test screen reader compatibility for housing-related elements\n   - Confirm color contrast meets accessibility standards\n   - Test with various accessibility settings enabled",
        "status": "done",
        "dependencies": [
          2,
          4,
          6,
          7
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Develop Housing Purchase Interface",
            "description": "Create the user interface components for purchasing housing units, including input fields, purchase button, and dynamic display of housing costs and units based on seasonal price data.",
            "dependencies": [],
            "details": "Implement an input field for entering the monetary amount for housing at the start of each round. Add a 'Purchase Housing' button with validation to ensure valid input. Display the current cost per housing unit using seasonal price data and calculate/display the number of housing units that will be purchased.\n<info added on 2025-07-29T08:05:05.612Z>\nTo implement the housing purchase interface, I'll add the following to the gameState:\n\n1. Initialize the housingCapacity property in the gameState object, starting at 0.\n\n2. Create the HTML elements for the housing purchase interface in the purchase section:\n   - Add a labeled input field for entering housing purchase amount\n   - Include a \"Purchase Housing\" button\n   - Create a display area showing current cost per housing unit based on season\n   - Add a preview showing how many housing units will be purchased with entered amount\n\n3. Add a housing capacity display to the flock information section that shows:\n   - Current housing capacity\n   - Maximum flock size allowed based on capacity\n   - Visual indicator when capacity is approaching or at maximum\n\n4. Implement the JavaScript functionality to:\n   - Update the housing cost display based on current season\n   - Calculate housing units to be purchased based on input amount and current price\n   - Validate input to ensure it's a positive number and player has sufficient funds\n   - Update the gameState.housingCapacity property when purchase is confirmed\n   - Persist housing capacity between rounds\n   - Enforce housing capacity limit during sheep purchase phase\n</info added on 2025-07-29T08:05:05.612Z>\n<info added on 2025-07-29T08:08:13.147Z>\nImplementation of the housing purchase interface has been successfully completed with all planned features. The housingCapacity property was added to the gameState object with an initial value of 0. The HTML interface includes an input field for housing purchases, a purchase button with validation, real-time preview of units to be purchased, and current cost display based on season.\n\nThe housing capacity information is now displayed in the flock information section. All required JavaScript functionality has been implemented including handleHousingPurchase() with validation, updateHousingPreview() for real-time calculations, and helper methods checkHousingCapacity() and getHousingStatus(). The updateDisplay() method was enhanced to show housing information, and handlePurchase() now checks housing capacity before allowing sheep purchases.\n\nThe implementation includes proper game integration with resetGame() updated to reset housing capacity, and comprehensive CSS styling for the housing interface. The system successfully integrates with seasonal pricing mechanics and persists housing capacity between game rounds, effectively limiting sheep purchases based on available housing.\n</info added on 2025-07-29T08:08:13.147Z>",
            "status": "done",
            "testStrategy": "Verify the input accepts valid monetary values, the correct number of housing units is calculated, and the seasonal housing cost is displayed. Test edge cases such as zero input and maximum allowed purchase."
          },
          {
            "id": 2,
            "title": "Implement Housing Capacity Management",
            "description": "Add and manage the housingCapacity property in the game state, ensure persistence between rounds, and enforce housing limits on flock size and sheep purchases.",
            "dependencies": [
              "17.1"
            ],
            "details": "Add a housingCapacity property to the gameState object. Ensure housing capacity persists between rounds. Implement a function to calculate the maximum flock size based on housing (1 unit = 1 sheep). Update the purchase phase logic to check housing capacity before allowing sheep purchases.\n<info added on 2025-07-29T08:09:51.234Z>\nSuccessfully implemented housing capacity management with the following enhancements:\n\n- Added housingCapacity and housingPurchased properties to the gameState and round data structures\n- Implemented persistence of housing capacity between rounds through proper state management\n- Created initializeRoundData() method to ensure consistent round data initialization\n- Updated initializeGame() and advanceRound() methods to use the new initialization function\n- Implemented validation methods:\n  * checkHousingSufficiency() - validates flock size against available housing\n  * getMaxFlockSize() - calculates maximum allowed flock size based on housing\n- Modified handleHousingPurchase() to track housing purchases in round data\n- Enhanced handlePurchase() to update existing round data rather than creating new entries\n- Implemented round-by-round tracking of housing purchases in roundHistory\n- Added validation at the start of each round to ensure housing capacity is sufficient\n</info added on 2025-07-29T08:09:51.234Z>",
            "status": "done",
            "testStrategy": "Test that housing capacity updates correctly after purchases, persists between rounds, and restricts sheep purchases when at capacity."
          },
          {
            "id": 3,
            "title": "Create Housing Validation and Feedback System",
            "description": "Implement validation logic to check if flock size exceeds housing capacity, provide warnings, block round progression if housing is insufficient, and add visual indicators for capacity limits.",
            "dependencies": [
              "17.2"
            ],
            "details": "Implement validation to check if the current flock size exceeds housing capacity at key game phases. Display warning messages and block round progression if housing is inadequate. Add visual indicators when housing capacity is near or at maximum.\n<info added on 2025-07-29T08:11:33.884Z>\nSuccessfully completed housing validation and feedback system implementation:\n\nEnhanced round completion validation by updating checkRoundCompletion() to include housing capacity validation and adding housing sufficiency check before allowing round advancement. Created handleNextRound() method with comprehensive validation that blocks round progression when housing is insufficient.\n\nImplemented comprehensive visual indicators with CSS classes for warning, danger, and success states through the updateHousingVisualIndicators() method. Housing display changes color based on capacity status: green when plenty of housing is available, yellow when nearly at capacity (≤2 units remaining), and red when at capacity or insufficient.\n\nAdded housing system help and guidance by creating showHousingHelp() method with comprehensive explanation and a help icon (❓) next to housing section header. The help explains housing mechanics, visual indicators, and strategy tips.\n\nEnhanced validation feedback with warning messages when housing is insufficient, clear error messages when round advancement is blocked, visual feedback through color-coded indicators, and real-time status updates as housing capacity changes.\n</info added on 2025-07-29T08:11:33.884Z>",
            "status": "done",
            "testStrategy": "Test that warnings and blocks trigger when flock size exceeds capacity, and that visual indicators appear as capacity is approached or reached."
          },
          {
            "id": 4,
            "title": "Integrate Housing System with Game UI and Ledger",
            "description": "Display housing capacity and flock size in the UI, add housing expenses to the financial ledger, provide tooltips, and implement visual feedback for housing actions.",
            "dependencies": [
              "17.3"
            ],
            "details": "Update the game interface to show current housing capacity and flock size. Add a housing section to the financial ledger to track expenses. Create tooltips explaining housing mechanics and provide visual feedback when housing is purchased.\n<info added on 2025-07-29T08:13:59.933Z>\nSuccessfully integrated housing system with game UI and ledger. Added housing expenses tracking to financial ledger with a dedicated housing-expenses-display section and totalHousingExpenses property in gameState. Implemented comprehensive CSS styling for housing expenses with proper layout and color coding. Enhanced tooltips with detailed housing guidance and added visual feedback with animated scaling effects for housing purchases. Improved feedback system with success messages, animated displays, and smooth transitions. Updated game state management to track housing expenses, reset them properly, and integrate them into the overall financial tracking system.\n</info added on 2025-07-29T08:13:59.933Z>",
            "status": "done",
            "testStrategy": "Verify UI updates correctly reflect housing and flock data, ledger entries are accurate, tooltips are informative, and visual feedback is triggered on housing purchase."
          },
          {
            "id": 5,
            "title": "Integrate Housing System with Game State and Reporting",
            "description": "Update round initialization and sheep purchase validation to include housing checks, add housing costs to profit calculations, and include housing data in round history for reporting.",
            "dependencies": [
              "17.4"
            ],
            "details": "Modify round initialization to perform housing checks. Ensure sheep purchase validation considers housing limits. Add housing costs to profit calculations and include housing data in the round history for end-of-game reporting.\n<info added on 2025-07-29T08:15:18.700Z>\nSuccessfully integrated housing system with game state and reporting. Enhanced profit calculation with calculateFinalProfit() method that includes housing costs based on flock size × housing cost per sheep. Improved round history tracking by adding housingPurchased and housingCapacity data. Created showRoundHistory() method and added \"Round History\" button for detailed round reports. Enhanced game summary to display final housing capacity and total housing expenses. Game state management now includes comprehensive housing information with proper balance updates reflecting housing expenses. Reporting system provides transparent profit calculations showing housing purchases and capacity for each round, fully integrating housing into the financial tracking system.\n</info added on 2025-07-29T08:15:18.700Z>",
            "status": "done",
            "testStrategy": "Test that round cannot start without sufficient housing, sheep purchases are blocked if over capacity, profit calculations include housing costs, and round history accurately records housing data."
          }
        ]
      },
      {
        "id": 18,
        "title": "Remove Housing Element from Calculations Section",
        "description": "Remove all housing-related elements from the calculations section since the housing system has been moved to the left-hand side of the interface. This includes removing housing cost inputs, logic, and references from the calculation workflow.",
        "details": "Implement the removal of housing elements from the calculations section with the following steps:\n\n1. HTML Modifications:\n   - Remove the housing cost calculation input field from the calculations form\n   - Remove any housing cost labels, hints, and guidance text\n   - Update form layout to maintain visual consistency after removal\n   - Remove housing-related validation error messages\n\n2. JavaScript Modifications (calculations.js):\n   - Remove housing cost calculation functions\n   - Update the profit calculation formula to: `Profit = Wool Income - (Feed Cost + Purchase Cost)`\n   - Remove housing cost validation logic\n   - Update any functions that reference housing costs\n   - Remove housing from calculation attempt tracking\n\n3. Game Logic Updates:\n   - Modify round completion checks to no longer require housing calculations\n   - Update the calculation validation pipeline to exclude housing\n   - Ensure game progression works without housing calculations\n   - Update any references to housing in calculation-related helper functions\n\n4. Documentation Updates:\n   - Remove housing cost from worked examples and hints\n   - Update calculation guides to reflect the new profit formula\n   - Update any tooltips or help text that mention housing costs\n\n5. UI/UX Considerations:\n   - Ensure the removal of housing elements doesn't create awkward spacing or layout issues\n   - Update any progress indicators or completion checks\n   - Verify that focus order and keyboard navigation remain logical after removal\n\n6. Ensure the calculations section now only focuses on:\n   - Feed costs\n   - Wool income\n   - Profit calculations (using the updated formula)",
        "testStrategy": "1. Functional Testing:\n   - Verify all housing-related inputs and elements are completely removed from the calculations section\n   - Confirm the profit calculation works correctly with the new formula (Wool Income - (Feed Cost + Purchase Cost))\n   - Test that round progression works properly without housing calculations\n   - Verify all validation logic functions correctly with housing elements removed\n\n2. UI Testing:\n   - Check that the layout of the calculations section remains visually balanced after removal\n   - Verify no orphaned labels, hints, or guidance text related to housing remain\n   - Ensure focus order and keyboard navigation work logically\n\n3. Integration Testing:\n   - Verify the housing system on the left-hand side works independently\n   - Test that housing capacity validation still functions correctly\n   - Confirm that housing purchases affect the player's balance correctly\n   - Test the complete game flow to ensure progression through all rounds works without housing calculations\n\n4. Edge Case Testing:\n   - Test with various sheep quantities to ensure calculations remain accurate\n   - Verify game completion with different combinations of housing purchases\n   - Test with minimum and maximum values for all remaining inputs\n\n5. Accessibility Testing:\n   - Verify screen readers correctly navigate the updated calculations section\n   - Ensure all remaining calculation elements have proper ARIA attributes\n   - Test keyboard navigation through the modified interface",
        "status": "done",
        "dependencies": [
          6,
          7,
          16,
          17
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Remove Housing Inputs and Labels from Calculations HTML",
            "description": "Delete all housing-related input fields, labels, hints, and guidance text from the calculations section in the HTML. Adjust the form layout to maintain visual consistency and remove any housing-related validation error messages.",
            "dependencies": [],
            "details": "Edit the calculations form in index.html (or the relevant template) to remove the housing cost input, associated labels, and any help text. Update the form structure to close gaps and ensure the layout remains visually balanced. Remove any HTML elements that display housing-related validation errors.\n<info added on 2025-07-29T08:44:24.215Z>\nSuccessfully removed the entire housing calculation item div, including the guide, input field, and check button, from the calculations section in the HTML. Updated the profit calculation formula displayed in the form to: \"Profit = Wool Income - (Feed Cost + Purchase Cost)\". All references to housing cost have been removed from the profit calculation guide steps. Verified that the layout remains visually consistent with proper spacing after removal.\n</info added on 2025-07-29T08:44:24.215Z>",
            "status": "done",
            "testStrategy": "Verify that no housing-related fields, labels, or error messages are present in the calculations section. Check that the form layout is visually consistent and accessible."
          },
          {
            "id": 2,
            "title": "Refactor Calculations JavaScript to Remove Housing Logic",
            "description": "Update calculations.js to eliminate all housing cost calculation functions, validation logic, and references. Revise the profit calculation formula and ensure no housing-related logic remains in calculation tracking.",
            "dependencies": [],
            "details": "Delete or refactor functions in calculations.js that handle housing cost calculations, validation, or error handling. Update the profit calculation to use only wool income, feed cost, and purchase cost. Remove any housing references from calculation attempt tracking and helper functions.",
            "status": "done",
            "testStrategy": "Confirm that calculations.js contains no housing-related code. Test profit calculations to ensure they use the updated formula and produce correct results."
          },
          {
            "id": 3,
            "title": "Update Game Logic to Exclude Housing from Calculations Workflow",
            "description": "Modify game logic (in game.js and related files) so that round completion checks, calculation validation, and progression no longer reference or require housing calculations.",
            "dependencies": [],
            "details": "Edit round completion and validation logic to remove any dependencies on housing calculations. Ensure that game progression, helper functions, and state updates work correctly without housing in the calculations workflow.",
            "status": "done",
            "testStrategy": "Test round progression and completion in the game to ensure they function correctly without housing calculations. Verify that no errors occur due to missing housing data."
          },
          {
            "id": 4,
            "title": "Revise Documentation, Guides, and Tooltips to Remove Housing References",
            "description": "Update all documentation, worked examples, calculation guides, tooltips, and help text to remove references to housing costs and reflect the new profit formula.",
            "dependencies": [],
            "details": "Edit in-app documentation, guides, and tooltips to eliminate housing cost mentions. Update worked examples and calculation guides to use the revised profit formula and focus only on feed costs, wool income, and purchase costs.",
            "status": "done",
            "testStrategy": "Review all user-facing documentation and help text to ensure no housing references remain and that all examples use the updated calculation logic."
          },
          {
            "id": 5,
            "title": "Validate UI/UX Consistency and Accessibility Post-Removal",
            "description": "Ensure that the removal of housing elements does not introduce layout issues, awkward spacing, or accessibility problems. Update progress indicators and verify logical focus order and keyboard navigation.",
            "dependencies": [],
            "details": "Test the calculations section and related UI for visual consistency, proper spacing, and accessibility. Update progress indicators and completion checks as needed. Confirm that keyboard navigation and focus order remain logical after the removal.",
            "status": "done",
            "testStrategy": "Perform manual and automated UI/UX testing to confirm visual consistency, accessibility, and correct progress tracking. Validate that keyboard navigation is unaffected."
          }
        ]
      },
      {
        "id": 19,
        "title": "Modify Sheep Purchasing System to Use Money Input",
        "description": "Update the sheep purchasing system to allow players to enter the amount of money they want to spend rather than the number of sheep, calculating the quantity based on current sheep prices.",
        "details": "Implement the modified sheep purchasing system with the following components:\n\n1. HTML Interface Updates:\n   - Replace the current sheep quantity input (0-20) with a monetary input field\n   - Add a preview display showing how many sheep will be purchased based on the entered amount\n   - Update labels and instructions to reflect the new purchase mechanism\n   - Ensure the interface maintains visual consistency with the rest of the game\n\n2. JavaScript Modifications:\n   - Update the `handlePurchase()` function to calculate sheep quantity based on money input:\n     ```javascript\n     // Example implementation\n     function handlePurchase() {\n       const moneyInput = parseFloat(document.getElementById('sheepMoneyInput').value);\n       const sheepPrice = getCurrentSheepPrice(); // Get current seasonal price\n       const sheepQuantity = Math.floor(moneyInput / sheepPrice);\n       \n       // Apply purchase logic with calculated quantity\n       // ...\n     }\n     ```\n   - Implement a real-time preview function similar to the housing system:\n     ```javascript\n     function updateSheepPurchasePreview() {\n       const moneyInput = parseFloat(document.getElementById('sheepMoneyInput').value) || 0;\n       const sheepPrice = getCurrentSheepPrice();\n       const sheepQuantity = Math.floor(moneyInput / sheepPrice);\n       \n       document.getElementById('sheepPreview').textContent = \n         `This will purchase ${sheepQuantity} sheep at $${sheepPrice} each.`;\n     }\n     ```\n   - Add event listeners for real-time preview updates\n   - Handle edge cases (zero input, insufficient funds, maximum sheep limit)\n\n3. Integration with Existing Systems:\n   - Ensure the new purchase mechanism correctly updates the player's flock size\n   - Verify the purchase amount is properly deducted from available funds\n   - Update any related calculations that depend on sheep quantity\n   - Maintain compatibility with the seasonal pricing system\n\n4. User Experience Considerations:\n   - Add appropriate validation for the money input field\n   - Provide clear feedback about the purchase results\n   - Ensure the interface is intuitive and consistent with the housing purchase system\n   - Add tooltips or help text explaining the new purchase mechanism",
        "testStrategy": "1. Functional Testing:\n   - Verify the money input field accepts valid monetary values\n   - Test that the correct number of sheep is calculated based on input amount and current sheep price\n   - Confirm the seasonal sheep price is correctly used in calculations\n   - Test edge cases:\n     - Zero input (should purchase 0 sheep)\n     - Very small amounts (less than one sheep's worth)\n     - Large amounts (verify maximum sheep limit is enforced)\n     - Non-numeric inputs (should be properly validated)\n\n2. Integration Testing:\n   - Verify the purchase correctly updates the player's flock size\n   - Confirm the purchase amount is properly deducted from available funds\n   - Test across different seasons to ensure dynamic pricing is handled correctly\n   - Verify the preview updates correctly when the input changes\n\n3. User Interface Testing:\n   - Check that the interface is visually consistent with the housing purchase system\n   - Verify all labels and instructions are clear and accurate\n   - Test the responsiveness of the preview system\n   - Ensure appropriate validation messages are displayed for invalid inputs\n\n4. Cross-Browser Testing:\n   - Test the functionality in all supported browsers\n   - Verify the input field and preview display correctly on different screen sizes\n\n5. Regression Testing:\n   - Verify that other game systems still function correctly after the changes\n   - Ensure calculations dependent on sheep quantity still work properly",
        "status": "done",
        "dependencies": [
          6,
          7,
          17
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Update HTML Interface for Money-Based Sheep Purchase",
            "description": "Replace the sheep quantity input with a monetary input field, add a real-time preview display for sheep quantity based on entered money, and update all labels and instructions to reflect the new purchase mechanism while maintaining visual consistency with the existing UI.",
            "dependencies": [],
            "details": "Modify the sheep purchase section in the HTML to remove the quantity input and add a new input field for money (e.g., <input id='sheepMoneyInput'>). Add a preview area (e.g., <span id='sheepPreview'>) to display the calculated number of sheep. Update all instructional text and labels to reference money input instead of sheep quantity. Ensure the layout and styling match the rest of the game, referencing the housing purchase system for consistency.\n<info added on 2025-07-29T09:08:50.403Z>\nHTML interface for the sheep purchase system has been successfully updated with the following changes:\n\n1. Replaced the sheep quantity input field with a money input field:\n   - Changed input ID from 'sheepQuantity' to 'sheepMoneyInput'\n   - Updated label to \"Amount to spend on sheep ($):\"\n   - Added appropriate title attributes for tooltips\n   - Set input type to number with min=\"0\" and step=\"1\"\n\n2. Added a preview section similar to the housing system:\n   - Created 'sheep-info' div with cost information display\n   - Added 'sheepCostPerUnit' span to show current sheep price\n   - Added 'sheepUnitsPreview' span to show calculated sheep quantity\n   - Maintained visual consistency with the housing purchase interface\n\n3. Updated all labels and instructions to reflect the new money-based purchase mechanism\n\nThe interface now matches the housing purchase system pattern and provides clear visual feedback about the purchase calculation.\n</info added on 2025-07-29T09:08:50.403Z>",
            "status": "done",
            "testStrategy": "Verify the new input field appears in place of the old quantity selector. Confirm the preview area updates as money is entered. Check that all labels and instructions are clear and consistent with the rest of the UI."
          },
          {
            "id": 2,
            "title": "Implement JavaScript Calculation and Purchase Logic",
            "description": "Update the sheep purchase JavaScript to calculate sheep quantity from the money input, using the current sheep price, and handle the purchase transaction accordingly.",
            "dependencies": [
              "19.1"
            ],
            "details": "Modify the handlePurchase() function to read the money input, retrieve the current sheep price, and calculate the number of sheep as Math.floor(moneyInput / sheepPrice). Update the player's flock and deduct the correct amount of money. Ensure compatibility with the seasonal pricing system and update any related calculations that depend on sheep quantity.\n<info added on 2025-07-29T09:10:03.662Z>\nSuccessfully implemented the JavaScript calculation and purchase logic for the money-based sheep purchase system:\n\n1. Updated the `handlePurchase()` function:\n   - Changed from reading sheep quantity to reading money input from 'sheepMoneyInput'\n   - Added validation for money input (positive number, sufficient funds)\n   - Implemented calculation: `quantity = Math.floor(moneyInput / sheepPrice)`\n   - Added validation for minimum purchase (at least 1 sheep) and maximum limit (20 sheep)\n   - Updated game state with calculated quantity and actual cost\n   - Added input clearing and preview update after purchase\n   - Enhanced feedback message with sheep emoji\n\n2. Created `updateSheepPurchasePreview()` function:\n   - Calculates sheep quantity based on money input and current price\n   - Updates the preview display in real-time\n   - Updates the cost per sheep display\n\n3. Added event listener for real-time preview updates:\n   - Listens for 'input' events on the sheep money input field\n   - Calls `updateSheepPurchasePreview()` when input changes\n\n4. Integrated with existing systems:\n   - Added sheep preview update to `updateSeasonalPrices()` for price changes\n   - Added sheep preview update to `initializeGame()` for game initialization\n   - Maintained compatibility with seasonal pricing system\n   - Preserved all existing validation and game state updates\n\nThe system now correctly calculates sheep quantity from money input and maintains consistency with the housing purchase system.\n</info added on 2025-07-29T09:10:03.662Z>",
            "status": "done",
            "testStrategy": "Test that entering a valid money amount results in the correct number of sheep being purchased and the correct deduction from player funds. Confirm that the seasonal sheep price is used in all calculations."
          },
          {
            "id": 3,
            "title": "Develop Real-Time Preview System for Sheep Purchase",
            "description": "Implement a real-time preview function that updates the displayed number of sheep to be purchased as the player enters a money amount, similar to the housing system.",
            "dependencies": [
              "19.1",
              "19.2"
            ],
            "details": "Create an updateSheepPurchasePreview() function that listens for input events on the money field, calculates the sheep quantity using the current price, and updates the preview display. Add event listeners to trigger this function on input changes. Ensure the preview updates instantly and accurately reflects the current input and price.",
            "status": "done",
            "testStrategy": "Verify that the preview updates in real time as the player types different money amounts. Confirm that the preview always matches the calculation used in the purchase logic."
          },
          {
            "id": 4,
            "title": "Add Input Validation and User Feedback Mechanisms",
            "description": "Implement validation for the money input field, handle edge cases (zero input, insufficient funds, maximum sheep limit), and provide clear feedback and help text to the user.",
            "dependencies": [
              "19.1",
              "19.2",
              "19.3"
            ],
            "details": "Add validation logic to ensure the money input is a positive number, does not exceed available funds, and does not result in exceeding the maximum allowed sheep. Display error messages or disable the purchase button as appropriate. Add tooltips or help text explaining the new purchase mechanism and any constraints.\n<info added on 2025-07-29T09:11:01.244Z>\nSuccessfully implemented comprehensive input validation and user feedback mechanisms for the sheep purchase system:\n\n1. Enhanced validation in `handlePurchase()` function:\n   - Validates money input is a positive number\n   - Checks for sufficient funds before purchase\n   - Validates minimum purchase (at least 1 sheep)\n   - Enforces maximum sheep limit (20 per round)\n   - Validates housing capacity requirements\n   - Provides clear error messages for each validation failure\n\n2. Added comprehensive help system:\n   - Created `showSheepPurchaseHelp()` function with detailed explanations\n   - Added help button to the sheep purchase section header\n   - Included examples showing how the calculation works in different seasons\n   - Provided strategic advice about seasonal price variations\n   - Explained the relationship with housing capacity\n\n3. Enhanced user interface:\n   - Added help icon button with tooltip\n   - Updated section header to match housing purchase style\n   - Maintained visual consistency with existing UI patterns\n\n4. Improved user feedback:\n   - Clear error messages for invalid inputs\n   - Success messages with sheep emoji and purchase details\n   - Real-time preview updates showing calculated sheep quantity\n   - Tooltips on input fields explaining the purchase mechanism\n</info added on 2025-07-29T09:11:01.244Z>",
            "status": "done",
            "testStrategy": "Test input with zero, negative, and excessively large values. Confirm that invalid inputs are rejected and appropriate feedback is shown. Verify that help text and tooltips are present and accurate."
          },
          {
            "id": 5,
            "title": "Test and Integrate Sheep Purchase System with Game Logic",
            "description": "Perform comprehensive testing of the modified sheep purchasing system, ensuring correct integration with flock size, funds, and seasonal pricing, and maintain consistency with the housing purchase system.",
            "dependencies": [
              "19.1",
              "19.2",
              "19.3",
              "19.4"
            ],
            "details": "Test the full purchase flow, including edge cases and integration with the game's calculation engine. Verify that all related game state updates (flock size, funds, dependent calculations) function correctly. Compare user experience and logic with the housing purchase system to ensure consistency.\n<info added on 2025-07-29T09:12:07.766Z>\nSuccessfully completed comprehensive testing and integration of the modified sheep purchasing system:\n\n1. Functional Testing Results:\n   ✅ Money input field accepts valid monetary values\n   ✅ Correct sheep quantity calculation based on input amount and current sheep price\n   ✅ Seasonal sheep price correctly used in all calculations\n   ✅ Edge cases handled properly:\n     - Zero input: Shows \"Amount too small to purchase any sheep\"\n     - Very small amounts: Properly validated\n     - Large amounts: Maximum sheep limit (20) enforced\n     - Non-numeric inputs: Properly validated with error messages\n\n2. Integration Testing Results:\n   ✅ Purchase correctly updates player's flock size\n   ✅ Purchase amount properly deducted from available funds\n   ✅ Dynamic pricing handled correctly across different seasons\n   ✅ Preview updates correctly when input changes\n   ✅ All game state updates function correctly\n\n3. User Interface Testing Results:\n   ✅ Interface visually consistent with housing purchase system\n   ✅ All labels and instructions clear and accurate\n   ✅ Preview system responsive and updates in real-time\n   ✅ Appropriate validation messages displayed for invalid inputs\n   ✅ Help system accessible and informative\n\n4. CSS Integration:\n   ✅ Added comprehensive CSS styles for sheep-info section\n   ✅ Maintained visual consistency with existing housing system\n   ✅ Responsive design preserved across different screen sizes\n\n5. System Integration:\n   ✅ All existing game systems still function correctly\n   ✅ Calculations dependent on sheep quantity work properly\n   ✅ Seasonal pricing system integration maintained\n   ✅ Housing capacity validation preserved\n   ✅ Game state management updated correctly\n\nThe sheep purchasing system now successfully matches the housing purchase mechanics, requiring players to enter money amounts instead of sheep quantities, with real-time preview and comprehensive validation.\n</info added on 2025-07-29T09:12:07.766Z>",
            "status": "done",
            "testStrategy": "Run functional tests for all scenarios: valid purchase, insufficient funds, maximum sheep, and seasonal price changes. Confirm that all game state updates and UI feedback are correct and consistent."
          }
        ]
      },
      {
        "id": 20,
        "title": "Implement Realistic Profit Calculation Including Housing Costs",
        "description": "Update the profit calculation formula to include housing costs for a more realistic business simulation, changing from \"Profit = Wool Income - (Feed Cost + Purchase Cost)\" to \"Profit = Wool Income - (Feed Cost + Purchase Cost + Housing Cost)\".",
        "details": "Implement the updated profit calculation formula with the following changes:\n\n1. Update the profit calculation in calculations.js:\n   - Modify the calculateProfit function to include housing costs\n   - Add housing cost as a parameter to the function\n   - Implement the new formula: Profit = Wool Income - (Feed Cost + Purchase Cost + Housing Cost)\n   - Calculate Housing Cost as: Housing units purchased this round × Housing cost per unit\n   - Use the existing data structure currentRoundData.housingPurchased to access housing units\n\n2. Update the calculateCorrectAnswer method in game.js:\n   - Modify the method to include housing costs in profit calculations\n   - Ensure the method retrieves the current housing cost per unit from the seasonal data\n   - Calculate total housing cost based on units purchased in the current round\n\n3. Update the calculateFinalProfit method:\n   - Include housing costs in the final profit calculation\n   - Ensure housing costs are properly accounted for in round-by-round profit tracking\n\n4. Update the UI to reflect the new formula:\n   - Modify the profit calculation display in the HTML interface\n   - Update any labels or tooltips that explain the profit formula\n   - Ensure the housing cost is visibly included in profit calculations\n\n5. Update validation and feedback:\n   - Modify validation logic to check against the new profit formula\n   - Update error messages and hints to reference housing costs\n   - Ensure worked examples include housing costs in their calculations\n\n6. Update documentation:\n   - Modify all worked examples to include housing costs\n   - Update any guides or help text that explain profit calculations\n   - Ensure consistency in all references to the profit formula\n\n7. Ensure proper tracking:\n   - Verify housing costs are properly tracked per round in the game state\n   - Update any analytics or reporting to include housing costs in profit breakdowns",
        "testStrategy": "1. Unit Testing:\n   - Create unit tests for the updated calculateProfit function with various input combinations\n   - Verify the function correctly includes housing costs in the calculation\n   - Test edge cases such as zero housing purchased, maximum housing purchased\n\n2. Integration Testing:\n   - Test the complete profit calculation workflow from user input to final display\n   - Verify that housing costs from the housing system are correctly incorporated\n   - Test round progression to ensure housing costs are properly tracked between rounds\n\n3. UI Testing:\n   - Verify that the profit calculation display correctly shows housing costs\n   - Check that all labels, tooltips, and explanations reflect the updated formula\n   - Test that worked examples correctly demonstrate the new calculation\n\n4. Validation Testing:\n   - Test that student answers are validated against the correct formula\n   - Verify error messages and hints correctly reference housing costs\n   - Test feedback mechanisms to ensure they provide appropriate guidance\n\n5. Regression Testing:\n   - Verify that other calculations remain unaffected by the changes\n   - Test the complete game flow to ensure no unintended side effects\n   - Verify that historical data and reports correctly include housing costs\n\n6. Cross-browser Testing:\n   - Test the updated calculations in all supported browsers\n   - Verify consistent behavior across different platforms",
        "status": "done",
        "dependencies": [
          6,
          7,
          17,
          18
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Update Profit Calculation Logic in calculations.js",
            "description": "Modify the calculateProfit function to include housing costs as a parameter and implement the new formula: Profit = Wool Income - (Feed Cost + Purchase Cost + Housing Cost). Calculate housing cost as housing units purchased this round multiplied by housing cost per unit, using currentRoundData.housingPurchased.",
            "dependencies": [],
            "details": "Refactor the calculateProfit function to accept housing cost, update all internal calculations to use the new formula, and ensure housing cost is computed using the correct data structure for each round.",
            "status": "done",
            "testStrategy": "Create unit tests for calculateProfit with various combinations of housing units and costs, including edge cases such as zero or maximum housing purchased."
          },
          {
            "id": 2,
            "title": "Integrate Housing Cost into Game Logic Methods",
            "description": "Update the calculateCorrectAnswer and calculateFinalProfit methods in game.js to include housing costs in all profit calculations, ensuring correct retrieval of housing cost per unit from seasonal data and accurate round-by-round tracking.",
            "dependencies": [
              "20.1"
            ],
            "details": "Modify both methods to fetch the current housing cost per unit, multiply by housing units purchased, and include this value in all profit calculations and tracking arrays.",
            "status": "done",
            "testStrategy": "Write integration tests to verify profit calculations in various game scenarios, ensuring housing costs are always included and correctly calculated."
          },
          {
            "id": 3,
            "title": "Update User Interface to Display New Profit Formula",
            "description": "Modify the HTML interface to display the updated profit formula, update labels and tooltips to reference housing costs, and ensure the housing cost is visibly included in all profit calculation displays.",
            "dependencies": [
              "20.2"
            ],
            "details": "Change UI elements to show the new formula, update any explanatory text, and verify that housing cost is clearly presented wherever profit is shown or explained.",
            "status": "done",
            "testStrategy": "Manually verify UI updates in all relevant screens and states; check that tooltips, labels, and calculation displays are accurate and clear."
          },
          {
            "id": 4,
            "title": "Revise Validation, Feedback, and Worked Examples",
            "description": "Update validation logic to check against the new profit formula, revise error messages and hints to reference housing costs, and ensure all worked examples and feedback include housing costs in their calculations.",
            "dependencies": [
              "20.3"
            ],
            "details": "Adjust validation routines to use the updated formula, rewrite error and hint messages as needed, and update all example calculations to include housing costs.",
            "status": "done",
            "testStrategy": "Test validation with correct and incorrect inputs, review all feedback and examples for accuracy and clarity regarding housing costs."
          },
          {
            "id": 5,
            "title": "Update Documentation and Ensure Consistency",
            "description": "Revise all guides, help text, and documentation to include housing costs in profit calculations, ensuring consistency across all references to the profit formula.",
            "dependencies": [
              "20.4"
            ],
            "details": "Update step-by-step guides, help overlays, and any instructional content to reflect the new formula and calculation steps involving housing costs.",
            "status": "done",
            "testStrategy": "Review all documentation and guides for completeness and accuracy; verify that all references to profit calculation now include housing costs."
          }
        ]
      },
      {
        "id": 21,
        "title": "Implement Round-Specific Purchase Tracking for Sheep and Housing Units",
        "description": "Add functionality to track, display, and reset the number of sheep and housing units purchased during the current round, providing clear user feedback and maintaining separation from persistent game data.",
        "details": "1. **Extend Game State:**\n   - Add properties to the game state object for `sheepPurchasedThisRound` and `housingUnitsPurchasedThisRound`, initialized to zero at the start of each round.\n   \n2. **Update Purchase Handlers:**\n   - In the sheep and housing purchase functions, increment the respective round-specific counters each time a purchase is made.\n   - Ensure these counters are updated only for purchases within the current round and do not affect the persistent flock size or total housing capacity.\n   \n3. **Display Round-Specific Counts:**\n   - In the purchase sections of the UI, add elements to display the current round's sheep and housing unit purchases.\n   - Use clear, user-friendly messages such as \"During this round you have purchased X sheep\" and \"During this round you have purchased Y housing units\".\n   - Ensure these messages update reactively as purchases are made.\n   \n4. **Reset on Round Advance:**\n   - When advancing to the next round (in the round transition logic), reset both `sheepPurchasedThisRound` and `housingUnitsPurchasedThisRound` to zero.\n   - Confirm that persistent flock size and housing capacity remain unaffected by this reset.\n   \n5. **Maintain Accessibility and Consistency:**\n   - Ensure new UI elements are accessible (e.g., ARIA labels, screen reader support) and visually consistent with existing design patterns.\n   - Follow best practices for state management (e.g., using a centralized state store or context if applicable) to avoid data leakage between rounds.\n   \n6. **Code Example (Pseudo-JS):**\n   ```javascript\n   // On purchase\n   gameState.sheepPurchasedThisRound += quantity;\n   // On round advance\n   gameState.sheepPurchasedThisRound = 0;\n   ```\n   \n7. **Testing and Analytics:**\n   - Optionally, emit analytics events for round-specific purchases using a standard event tracking API (e.g., `analytics.track('Sheep Purchased This Round', { count: X })`)[1].",
        "testStrategy": "1. Start a new round and verify that both round-specific counters are zero.\n2. Make one or more sheep and housing purchases; confirm that the round-specific counters increment correctly and the UI displays accurate, user-friendly messages.\n3. Advance to the next round and verify that the round-specific counters reset to zero, while persistent flock size and housing capacity remain correct.\n4. Attempt additional purchases in the new round and confirm counters and messages update as expected.\n5. Test edge cases (e.g., no purchases, maximum allowed purchases, rapid consecutive purchases).\n6. Verify accessibility of new UI elements using screen readers and keyboard navigation.\n7. If analytics are implemented, confirm that round-specific purchase events are tracked with correct properties.",
        "status": "done",
        "dependencies": [
          4,
          7,
          17
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Extend Game State with Round-Specific Purchase Counters",
            "description": "Add properties to the game state object for tracking the number of sheep and housing units purchased during the current round, initializing both counters to zero at the start of each round.",
            "dependencies": [],
            "details": "Modify the central game state structure to include 'sheepPurchasedThisRound' and 'housingUnitsPurchasedThisRound', ensuring these are reset to zero whenever a new round begins.",
            "status": "done",
            "testStrategy": "Start a new round and verify that both counters are initialized to zero in the game state."
          },
          {
            "id": 2,
            "title": "Update Purchase Handlers to Increment Round Counters",
            "description": "Modify sheep and housing purchase functions to increment the respective round-specific counters each time a purchase is made, ensuring these counters only reflect purchases within the current round.",
            "dependencies": [
              "21.1"
            ],
            "details": "In the purchase logic, increment 'sheepPurchasedThisRound' and 'housingUnitsPurchasedThisRound' as appropriate, without affecting persistent flock size or total housing capacity.",
            "status": "done",
            "testStrategy": "Make one or more sheep and housing purchases in a round; confirm that the round-specific counters increment correctly and persistent totals remain unaffected."
          },
          {
            "id": 3,
            "title": "Display Round-Specific Purchase Counts in the UI",
            "description": "Add UI elements to display the number of sheep and housing units purchased during the current round, using clear, user-friendly messages that update reactively as purchases are made.",
            "dependencies": [
              "21.2"
            ],
            "details": "Integrate dynamic UI components in the purchase sections to show messages like 'During this round you have purchased X sheep' and 'During this round you have purchased Y housing units', updating in real time.",
            "status": "done",
            "testStrategy": "Verify that the UI displays accurate, up-to-date purchase counts and user-friendly messages as purchases occur."
          },
          {
            "id": 4,
            "title": "Reset Round-Specific Counters on Round Advance",
            "description": "Implement logic to reset both 'sheepPurchasedThisRound' and 'housingUnitsPurchasedThisRound' to zero when advancing to the next round, ensuring persistent game data is unaffected.",
            "dependencies": [
              "21.1",
              "21.2",
              "21.3"
            ],
            "details": "In the round transition logic, reset the round-specific counters and confirm that flock size and housing capacity remain unchanged.",
            "status": "done",
            "testStrategy": "Advance to the next round and verify that both counters reset to zero while persistent totals are preserved."
          },
          {
            "id": 5,
            "title": "Ensure Accessibility and State Management Best Practices",
            "description": "Review and update new UI elements for accessibility (e.g., ARIA labels, screen reader support) and ensure state management follows best practices to prevent data leakage between rounds.",
            "dependencies": [
              "21.3"
            ],
            "details": "Audit UI for accessibility compliance and confirm that state is managed centrally and cleanly, using context or a state store as appropriate.",
            "status": "done",
            "testStrategy": "Test new UI elements with screen readers and keyboard navigation; verify state isolation between rounds and accessibility compliance."
          }
        ]
      },
      {
        "id": 22,
        "title": "Implement Basic Math Tips System for Sheep Business Game",
        "description": "Create a contextual math tips system that provides helpful mathematical guidance to students during gameplay, with categorized tips for different calculation types and integration with the existing error handling system.",
        "details": "Implement the Phase 1 Basic Math Tips System with the following components:\n\n1. Create a MathTips class in calculations.js:\n   - Implement categorized tip collections for:\n     * Multiplication tips (e.g., \"Remember to multiply the number of sheep by the cost per sheep\")\n     * Addition tips (e.g., \"Add all costs together before subtracting from income\")\n     * Profit calculation tips (e.g., \"Profit equals income minus all expenses\")\n   - Create methods to retrieve appropriate tips based on context\n   - Implement tip selection logic that varies tips to prevent repetition\n\n2. Integrate with existing error handling:\n   - Modify the validation system in validation.js to call the MathTips system when errors are detected\n   - Add context awareness to determine which category of tip is most relevant\n   - Pass the specific error type and user input to the tip system for targeted guidance\n\n3. Implement smart tip triggers:\n   - Create pattern recognition for common mistakes:\n     * Forgetting to multiply (e.g., using the price per sheep instead of total)\n     * Place value errors (e.g., misaligning decimal points)\n     * Addition/subtraction errors (e.g., adding costs instead of subtracting)\n   - Analyze student input to identify the likely error type\n   - Generate appropriate tips based on the detected error pattern\n\n4. Add teacher settings integration:\n   - Extend the existing teacher settings panel with math tip controls\n   - Implement toggle for enabling/disabling the math tips system\n   - Add frequency control with options:\n     * Always (show tips proactively)\n     * On Error (show tips only after incorrect answers)\n     * Never (disable tips completely)\n   - Save settings in the game state\n\n5. Create visual feedback system:\n   - Utilize the existing feedback banner for displaying tips\n   - Implement appropriate styling for math tips (distinct from error messages)\n   - Add subtle animations to draw attention to tips\n   - Ensure tips are displayed clearly and legibly\n   - Make tips dismissible by the student\n\nThe implementation should maintain consistency with the existing vanilla JavaScript architecture and follow established code patterns. No external libraries should be used.",
        "testStrategy": "1. Unit Testing:\n   - Test the MathTips class methods with various inputs to verify correct tip selection\n   - Verify that tip categories contain appropriate guidance for each calculation type\n   - Test pattern recognition logic with sample incorrect inputs\n   - Ensure no duplicate tips are shown consecutively\n\n2. Integration Testing:\n   - Verify math tips are correctly triggered when validation errors occur\n   - Test that the appropriate tip category is selected based on the context\n   - Confirm tips are displayed in the feedback banner with correct styling\n   - Test that tips change appropriately based on the specific error pattern\n\n3. Teacher Settings Testing:\n   - Verify enabling/disabling math tips works correctly\n   - Test each frequency setting (Always, On Error, Never)\n   - Confirm settings are saved and persist between sessions\n   - Test that settings changes take immediate effect\n\n4. User Interface Testing:\n   - Verify tips are clearly visible and properly formatted\n   - Test tip display on various screen sizes\n   - Confirm animations work as expected\n   - Test dismissal functionality\n\n5. Accessibility Testing:\n   - Verify tips are accessible to screen readers\n   - Test keyboard navigation for dismissing tips\n   - Ensure color contrast meets WCAG standards\n   - Confirm tips don't interfere with other accessibility features\n\n6. Edge Case Testing:\n   - Test behavior when multiple errors occur simultaneously\n   - Verify system handles rapid consecutive errors appropriately\n   - Test with extreme input values",
        "status": "done",
        "dependencies": [
          6,
          7,
          13,
          16
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Implement Visual Aids System for Mathematical Concepts",
        "description": "Create an interactive visual aids system with multiplication grid, number line, and money counter visualizers to help students understand mathematical concepts, integrated with the existing calculation validation system.",
        "details": "Implement the Visual Aids System with the following components:\n\n1. Multiplication Grid Visualizer:\n   - Create a modal component that displays a visual grid representation of multiplication problems\n   - Implement a dynamic grid generator that creates rows and columns based on the multiplication factors\n   - For example, 5×8 would show 5 rows of 8 dots or squares\n   - Add animation for sequential highlighting of rows/columns to demonstrate the concept\n   - Include clear labeling of factors and product\n\n2. Number Line Visualizer:\n   - Develop an interactive number line component for addition/subtraction visualization\n   - Implement animated highlighting/movement along the number line to show operations\n   - Include markers for starting value, operation, and result\n   - Support both positive and negative numbers\n   - Add zoom functionality for larger numbers\n\n3. Money Counter Visualizer:\n   - Create a visual representation of money amounts using colored \"bills\" and \"coins\"\n   - Implement different denominations with appropriate styling\n   - Support counting operations with animated grouping/ungrouping\n   - Include totaling functionality that updates as items are added/removed\n\n4. Integration with Calculation Validation:\n   - Modify the existing validation system in calculations.js to detect when students are struggling\n   - Add logic to offer visual aids after 1-2 incorrect attempts\n   - Implement a \"Show me visually\" button that appears after an incorrect attempt\n   - Create helper functions to determine which visualizer is appropriate for each calculation type\n\n5. Animation and Styling:\n   - Implement CSS animations for smooth transitions between states\n   - Create engaging visual effects for highlighting, counting, and results\n   - Ensure consistent styling with the existing game interface\n   - Optimize animations for performance across devices\n\n6. Teacher Settings Integration:\n   - Add options to the teacher settings panel to enable/disable visual aids\n   - Implement controls for visual aid frequency (always, after first mistake, after second mistake, never)\n   - Add settings for animation speed and complexity level\n   - Include option to set default visualizer type for each calculation\n\n7. Accessibility Considerations:\n   - Ensure all visualizers are keyboard navigable\n   - Add appropriate ARIA attributes for screen reader support\n   - Include text descriptions of visual operations\n   - Support high contrast mode and other accessibility features from Task 13\n\n8. Code Organization:\n   - Create a new file js/visualizers.js for the visual aid components\n   - Implement a VisualizerManager class to handle selection and display of appropriate visualizers\n   - Use the factory pattern to instantiate the correct visualizer type based on the calculation",
        "testStrategy": "1. Unit Testing:\n   - Test each visualizer component in isolation with various inputs\n   - Verify the multiplication grid correctly displays the proper number of rows and columns\n   - Test the number line with different starting points and operations\n   - Verify the money counter correctly represents different monetary values\n   - Test the integration with the calculation validation system\n\n2. Integration Testing:\n   - Verify visual aids appear at the appropriate times based on student performance\n   - Test that the \"Show me visually\" button appears after incorrect attempts\n   - Confirm that the correct visualizer is selected based on calculation type\n   - Test integration with teacher settings to ensure controls work as expected\n\n3. Accessibility Testing:\n   - Test keyboard navigation through all visualizer components\n   - Verify screen reader compatibility using NVDA and VoiceOver\n   - Test with high contrast mode enabled\n   - Verify all animations can be disabled for users with vestibular disorders\n\n4. Cross-browser Testing:\n   - Test visualizers in Chrome, Firefox, Safari, and Edge\n   - Verify animations work consistently across browsers\n   - Test on mobile devices to ensure touch interactions work properly\n\n5. Performance Testing:\n   - Measure rendering performance with complex visualizations\n   - Test with multiple visualizers active simultaneously\n   - Verify smooth animations even on lower-end devices\n\n6. User Testing:\n   - Conduct sessions with students to verify the visualizers improve understanding\n   - Gather feedback on clarity and helpfulness of visual representations\n   - Test with teachers to ensure settings provide adequate control",
        "status": "pending",
        "dependencies": [
          6,
          7,
          13,
          16,
          22
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Implement Smart Integration for Math Tips and Visual Aids",
        "description": "Create an intelligent system that adapts to individual student needs by analyzing error patterns, adjusting tip frequency, customizing learning paths, and integrating with existing analytics while maintaining the vanilla JavaScript architecture.",
        "details": "Implement the Phase 3 Smart Integration system with the following components:\n\n1. Advanced Mistake Analysis:\n   - Extend the existing validation system to identify specific error patterns:\n     * Place value errors (e.g., 12 × 10 = 120 vs 12 × 10 = 102)\n     * Sign errors (e.g., adding instead of subtracting)\n     * Calculation order mistakes (e.g., applying operations in incorrect sequence)\n   - Create a PatternRecognizer class in calculations.js that:\n     * Analyzes input against expected results\n     * Categorizes errors using pattern matching algorithms\n     * Stores error history per student\n     * Generates targeted feedback based on error type\n\n2. Adaptive Tip Frequency System:\n   - Implement a student performance tracker that:\n     * Monitors calculation accuracy over time\n     * Calculates a \"proficiency score\" (0-100) for each math concept\n     * Adjusts tip frequency inversely to proficiency (more tips for lower scores)\n   - Create adaptive display logic:\n     * High proficiency (>80%): Show tips only on request or after errors\n     * Medium proficiency (40-80%): Show occasional tips at key decision points\n     * Low proficiency (<40%): Proactively display tips before calculations\n\n3. Learning Path Customization:\n   - Implement specialized game modes focusing on specific skills:\n     * Multiplication Focus: Emphasizes sheep quantity × price calculations\n     * Addition Focus: Highlights combining different cost categories\n     * Profit Calculation Focus: Centers on income/expense relationships\n   - Create a mode selector in the UI with:\n     * Visual indicators of skill focus\n     * Brief descriptions of learning objectives\n     * Teacher recommendations based on student performance\n\n4. Student Progress Tracking:\n   - Implement a comprehensive tracking system for:\n     * Tip usage (which tips viewed, how often, time spent)\n     * Visual aid utilization (which visualizers used, frequency)\n     * Correlation between aid usage and performance improvement\n   - Create a data structure to store this information:\n```javascript\nconst studentProgressData = {\n  tipUsage: {\n    viewed: [], // Array of tip IDs viewed\n    timeSpent: {}, // Object mapping tip IDs to time spent\n    helpfulness: {} // Student ratings of tip usefulness\n  },\n  visualAidUsage: {\n    viewed: [], // Array of visual aid IDs used\n    timeSpent: {}, // Time spent with each visualizer\n    helpfulness: {} // Student ratings of visualizer usefulness\n  },\n  performanceMetrics: {\n    accuracyTrend: [], // Array of accuracy percentages over time\n    conceptMastery: {} // Object mapping concepts to mastery levels\n  }\n};\n```\n\n5. Analytics Integration:\n   - Extend the existing analytics system to include:\n     * Tip effectiveness metrics (correlation with correct answers)\n     * Visual aid impact on learning outcomes\n     * Adaptive system performance data\n   - Modify the PDF report generation to include:\n     * Section on learning support utilization\n     * Effectiveness of different support types\n     * Recommendations for future learning focus\n\n6. Advanced Visual Aid Preferences:\n   - Implement a learning style preference system:\n     * Visual: Enhanced grid-based visualizers with color coding\n     * Auditory: Text-to-speech explanations of mathematical concepts\n     * Kinesthetic: Interactive drag-and-drop calculation components\n   - Create a preference selector in the UI\n   - Store preferences in localStorage for persistence\n   - Apply preferred style across all game interactions\n\n7. Integration with Existing Architecture:\n   - Maintain vanilla JavaScript implementation without frameworks\n   - Use the existing event system for communication between components\n   - Extend the current MathTips and VisualAids classes rather than replacing them\n   - Implement new functionality as modular components that can be disabled if needed",
        "testStrategy": "1. Advanced Mistake Analysis Testing:\n   - Create a test suite with common mathematical errors for each category\n   - Verify the system correctly identifies place value errors, sign errors, and calculation order mistakes\n   - Test that appropriate targeted feedback is generated for each error type\n   - Verify error patterns are correctly stored in student history\n\n2. Adaptive Tip Frequency Testing:\n   - Create test scenarios with varying student proficiency levels\n   - Verify tip frequency increases appropriately for struggling students\n   - Confirm tips decrease for students demonstrating mastery\n   - Test the transition between proficiency levels to ensure smooth adaptation\n\n3. Learning Path Customization Testing:\n   - Test each specialized game mode to verify it emphasizes the correct skills\n   - Verify the mode selector UI displays appropriate information\n   - Test that teacher recommendations appear based on simulated performance data\n   - Ensure game mechanics function correctly in each specialized mode\n\n4. Student Progress Tracking Testing:\n   - Verify all tip and visual aid interactions are correctly recorded\n   - Test the data structure with various usage patterns\n   - Confirm time tracking accuracy for tip and visualizer usage\n   - Test persistence of tracking data between sessions\n\n5. Analytics Integration Testing:\n   - Verify new metrics are correctly calculated and stored\n   - Test PDF report generation with the new learning support sections\n   - Validate that effectiveness correlations are mathematically sound\n   - Test the recommendations engine with various performance scenarios\n\n6. Visual Aid Preferences Testing:\n   - Test each learning style mode (visual, auditory, kinesthetic)\n   - Verify preference selection is saved correctly to localStorage\n   - Confirm that the selected preference applies consistently across the game\n   - Test accessibility of each mode with screen readers and keyboard navigation\n\n7. Integration Testing:\n   - Perform end-to-end testing of the complete system\n   - Verify performance impact is minimal (page load under 2 seconds)\n   - Test backward compatibility with existing game features\n   - Conduct user testing with students of varying mathematical abilities\n   - Verify the system works across supported browsers (Chrome, Firefox, Safari, Edge)",
        "status": "pending",
        "dependencies": [
          6,
          7,
          13,
          16,
          22,
          23
        ],
        "priority": "low",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Move Feed Calculation from Financial Ledger to Expenses Section",
        "description": "Relocate the feed calculation component from Column 4 (Financial Ledger) to Column 2 (Expenses), positioning it above the sheep and housing purchase sections while maintaining all existing functionality and styling.",
        "details": "Implement the relocation of the feed calculation component with the following steps:\n\n1. HTML Modifications:\n   - Identify the feed calculation component in the Financial Ledger section (Column 4)\n   - Move the entire component (input field, label, check button, and guide) to the Expenses section (Column 2)\n   - Position the component above the existing sheep and housing purchase sections\n   - Ensure proper HTML structure and semantic markup is maintained\n   - Update any section-specific CSS classes or IDs as needed\n\n2. CSS Adjustments:\n   - Update any column-specific styling references for the feed calculation component\n   - Ensure consistent styling between the component's new location and surrounding elements\n   - Verify responsive design behavior in the new location\n   - Maintain proper spacing and alignment within the Expenses column\n\n3. JavaScript Updates:\n   - Update any DOM selectors that reference the feed calculation component by its previous location\n   - Verify event listeners are properly reattached after relocation\n   - Ensure the calculation guide toggle functionality works in the new location\n   - Update any column-specific logic that might reference the feed calculation\n\n4. Validation and Calculation Logic:\n   - Verify the feed calculation validation still functions correctly in the new location\n   - Ensure the calculation engine still processes feed calculations properly\n   - Maintain the connection between the feed calculation and other dependent calculations (like profit)\n   - Preserve any error handling and feedback mechanisms\n\n5. Documentation:\n   - Update any relevant documentation to reflect the new location of the feed calculation\n   - Add comments in the code to explain the relocation",
        "testStrategy": "1. UI Verification:\n   - Verify the feed calculation component appears correctly in the Expenses section (Column 2)\n   - Confirm it is positioned above the sheep and housing purchase sections\n   - Check that all elements (input field, label, check button, guide) are present and properly aligned\n   - Verify the styling is consistent with other components in the Expenses section\n\n2. Functionality Testing:\n   - Test the feed calculation input field accepts valid numerical values\n   - Verify the check button validates the calculation correctly\n   - Test that the calculation guide can be toggled open/closed\n   - Confirm error messages display properly when incorrect values are entered\n   - Verify the worked example appears after appropriate number of incorrect attempts\n\n3. Integration Testing:\n   - Test that the feed calculation still properly factors into the profit calculation\n   - Verify round progression works correctly with the relocated feed calculation\n   - Test that analytics still track feed calculation attempts correctly\n   - Confirm the PDF report generation includes the feed calculation data\n\n4. Responsive Design Testing:\n   - Test the new layout on various screen sizes (mobile, tablet, desktop)\n   - Verify the component displays correctly at all breakpoints\n   - Confirm the layout adjusts appropriately when resizing the browser\n\n5. Accessibility Testing:\n   - Verify keyboard navigation flows logically with the new component position\n   - Test screen reader announcements for the relocated component\n   - Confirm focus states are visible and working correctly",
        "status": "done",
        "dependencies": [
          3,
          6,
          7,
          16
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Identify and Move Feed Calculation Component in HTML",
            "description": "Locate the feed calculation component within the Financial Ledger section (Column 4) and move the entire component—including input field, label, check button, and guide—to the Expenses section (Column 2), positioning it above the sheep and housing purchase sections. Ensure semantic HTML structure is preserved and update any section-specific classes or IDs as needed.",
            "dependencies": [],
            "details": "Use DOM inspection and editing tools to accurately identify all elements and wrappers belonging to the feed calculation component. Move these elements in the HTML markup or via JavaScript DOM manipulation, ensuring the new placement matches the specified location and maintains accessibility and semantic standards.",
            "status": "done",
            "testStrategy": "Verify the feed calculation component appears in the correct position in Column 2, above the sheep and housing purchase sections, with all sub-elements present and properly structured."
          },
          {
            "id": 2,
            "title": "Update CSS for New Component Location",
            "description": "Adjust CSS to ensure the feed calculation component inherits the correct styling for its new location in the Expenses section, including spacing, alignment, and responsive behavior. Update or add any necessary selectors to maintain visual consistency.",
            "dependencies": [
              "25.1"
            ],
            "details": "Review and modify CSS rules that target the feed calculation component, especially those that reference its previous column or section. Ensure the component visually integrates with surrounding elements and behaves correctly across screen sizes.",
            "status": "done",
            "testStrategy": "Check that the component's appearance matches the design in its new location, with correct spacing and alignment. Test responsiveness by resizing the browser window and verifying layout integrity."
          },
          {
            "id": 3,
            "title": "Refactor JavaScript for Component Relocation",
            "description": "Update JavaScript code to reference the feed calculation component in its new location. Ensure all event listeners, DOM queries, and logic related to the component function correctly after the move.",
            "dependencies": [
              "25.1"
            ],
            "details": "Search for and update any DOM selectors, event bindings, or logic that assume the component's previous location. Reattach event listeners if necessary and verify that all interactive features, such as the calculation guide toggle, work as intended.",
            "status": "done",
            "testStrategy": "Test all interactive features of the feed calculation component, including input validation, button actions, and guide toggling, to confirm they function as before."
          },
          {
            "id": 4,
            "title": "Validate Calculation Logic and Integration",
            "description": "Ensure the feed calculation logic, validation, and integration with other calculations (such as profit) remain fully functional after relocation. Preserve all error handling and feedback mechanisms.",
            "dependencies": [
              "25.3"
            ],
            "details": "Run through all calculation scenarios, including edge cases, to confirm that the feed calculation produces correct results and that dependent calculations update accordingly. Check that error messages and validation feedback are displayed as expected.",
            "status": "done",
            "testStrategy": "Perform manual and automated tests to verify calculation accuracy, validation behavior, and integration with related components. Confirm that no regressions have occurred due to the move."
          },
          {
            "id": 5,
            "title": "Update Documentation and Code Comments",
            "description": "Revise any relevant documentation and in-code comments to reflect the new location of the feed calculation component and any changes made during the relocation process.",
            "dependencies": [
              "25.4"
            ],
            "details": "Update user-facing and developer documentation to describe the feed calculation's new placement. Add or revise code comments to clarify the rationale and implementation details of the relocation.",
            "status": "done",
            "testStrategy": "Review documentation and code comments for accuracy and completeness, ensuring they match the current implementation."
          }
        ]
      },
      {
        "id": 26,
        "title": "Replace Money Trend Graph with Comprehensive Transaction Record",
        "description": "Remove the Money Trend Graph and implement a comprehensive purchase and sales record that displays all transactions for the current round, helping players calculate their profit or loss.",
        "details": "Implement the replacement of the Money Trend Graph with a comprehensive transaction record through the following steps:\n\n1. Remove the existing Money Trend Graph:\n   - Identify and remove the Money Trend Graph component from the UI\n   - Remove any associated JavaScript code that generates and updates the graph\n   - Clean up any CSS styles specific to the graph component\n\n2. Design and implement the new Transaction Record component:\n   - Create a structured table layout with clear headers for transaction types, quantities, and costs\n   - Implement sections for:\n     * Sheep purchases (quantity, price per sheep, total cost)\n     * Housing purchases (units purchased, price per unit, total cost)\n     * Feed costs (calculated for the flock)\n     * Wool income (quantity sold, price per unit, total income)\n   - Add a prominent \"Current Round Profit/Loss\" calculation at the bottom\n   - Use color coding to distinguish between expenses (red) and income (green)\n\n3. Implement data binding:\n   - Connect the transaction record to the existing game state\n   - Update the display whenever a purchase is made or a calculation is completed\n   - Ensure the component reflects the `sheepPurchasedThisRound` and `housingUnitsPurchasedThisRound` data\n   - Calculate and display running totals as transactions occur\n\n4. Style the component:\n   - Use consistent styling with the rest of the game interface\n   - Ensure the component is visually prominent in the same location as the previous graph\n   - Implement responsive design for different screen sizes\n   - Apply accessibility standards (high contrast, screen reader support)\n\n5. Add interactive elements:\n   - Implement collapsible sections for transaction categories if needed\n   - Add tooltips explaining each transaction type\n   - Include a \"Reset View\" button to clear highlighting or filters\n\n6. Update the round progression logic:\n   - Ensure the transaction record resets properly at the beginning of each new round\n   - Archive previous round data for potential review",
        "testStrategy": "1. UI Verification:\n   - Verify the Money Trend Graph has been completely removed\n   - Confirm the new Transaction Record component appears in the same location\n   - Check that all transaction sections (purchases, costs, income) are displayed correctly\n   - Verify the profit/loss calculation is prominently displayed\n\n2. Functional Testing:\n   - Test that sheep purchases are correctly recorded and displayed in the transaction record\n   - Verify housing purchases appear with accurate unit counts and costs\n   - Confirm feed costs are properly calculated and displayed\n   - Test that wool income is accurately reflected\n   - Verify the profit/loss calculation updates correctly as transactions occur\n\n3. Data Accuracy Testing:\n   - Compare the displayed transaction data with the actual game state\n   - Verify all calculations match the expected values based on game rules\n   - Test with various purchase combinations to ensure consistent accuracy\n\n4. Round Progression Testing:\n   - Verify the transaction record resets properly at the beginning of each new round\n   - Confirm no data leaks between rounds\n\n5. Responsive Design Testing:\n   - Test the component on various screen sizes (mobile, tablet, desktop)\n   - Verify all information remains readable and accessible at different resolutions\n\n6. Accessibility Testing:\n   - Verify color contrast meets WCAG standards\n   - Test screen reader compatibility\n   - Confirm keyboard navigation works correctly",
        "status": "done",
        "dependencies": [
          3,
          6,
          7,
          19,
          21
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Convert Market Information Column to Side Panel",
        "description": "Redesign the Market Information column (currently the first column on the left-hand side) into a narrow side panel while maintaining all existing functionality and information display.",
        "details": "Implement the conversion of the Market Information column to a side panel with the following steps:\n\n1. UI Structure Modifications:\n   - Redesign the Market Information column to fit a narrow side panel format\n   - Maintain a fixed width (approximately 200-250px) for the side panel\n   - Implement vertical stacking of all elements that were previously in the Market Information column\n   - Add appropriate padding and margins for readability in the narrow format\n   - Ensure the side panel spans the full height of the game interface\n\n2. Content Reorganization:\n   - Maintain all existing Market Information features:\n     * Price display section with current market prices\n     * Market trends button (previously implemented in Task 11)\n     * Round history button\n     * Market conditions display\n     * Game controls (start/next round buttons)\n   - Optimize layout for vertical presentation:\n     * Use smaller font sizes where appropriate\n     * Implement collapsible sections if needed for space efficiency\n     * Ensure critical information remains immediately visible\n\n3. CSS Implementation:\n   - Update the main CSS grid layout to accommodate the new side panel structure\n   - Create specific styles for the narrow panel format\n   - Implement responsive behavior to ensure the side panel works across device sizes\n   - Use flexbox for vertical arrangement of elements within the panel\n   - Add appropriate shadows or borders to visually separate the panel from main content\n\n4. JavaScript Updates:\n   - Update any DOM references to Market Information elements\n   - Ensure all event listeners are properly reattached to the new structure\n   - Modify any positioning calculations that might be affected by the new layout\n   - Update any animations or transitions related to the Market Information elements\n\n5. Ensure Consistency:\n   - Maintain visual consistency with the rest of the application\n   - Use the same color scheme and typography as the existing design\n   - Ensure all interactive elements maintain the same functionality\n   - Preserve all data display formats and information hierarchy",
        "testStrategy": "1. UI Layout Testing:\n   - Verify the Market Information content is correctly displayed in the side panel format\n   - Confirm the side panel maintains appropriate width across different screen sizes\n   - Test that all elements are properly aligned and spaced within the narrow format\n   - Ensure no content is cut off or illegible in the new layout\n\n2. Functionality Testing:\n   - Test all buttons and interactive elements within the side panel:\n     * Verify the Market Trends button opens the trends display correctly\n     * Test the Round History button functionality\n     * Confirm game control buttons work as expected\n   - Ensure all market information is displayed accurately\n   - Verify price displays update correctly when market conditions change\n\n3. Responsive Design Testing:\n   - Test the layout on various screen sizes from mobile to desktop\n   - Verify the side panel adapts appropriately at each breakpoint\n   - Confirm the layout remains usable on smaller screens\n   - Test landscape and portrait orientations on tablet devices\n\n4. Integration Testing:\n   - Verify the side panel works correctly with all other game components\n   - Test interactions between the side panel and main game area\n   - Ensure the new layout doesn't interfere with existing game functionality\n   - Confirm that all data flows correctly between components\n\n5. Performance Testing:\n   - Measure any impact on page load time or rendering performance\n   - Verify smooth scrolling and interactions within the side panel\n   - Test with various amounts of market data to ensure scalability",
        "status": "done",
        "dependencies": [
          1,
          3,
          11
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Redesign UI Structure for Side Panel",
            "description": "Transform the Market Information column into a vertically stacked, narrow side panel with a fixed width (200-250px), ensuring it spans the full height of the interface and includes appropriate padding and margins for readability.",
            "dependencies": [],
            "details": "Update the main layout to replace the first column with a side panel. Arrange all Market Information elements vertically, maintaining a clear hierarchy and visual separation from the main content.\n<info added on 2025-07-31T10:28:19.192Z>\nHTML Structure Changes:\n- Converted `<section class=\"market-info-section\">` to `<aside class=\"market-info-side-panel\">`\n- Wrapped remaining sections in `<div class=\"main-content-area\">` with 3-column grid\n- Maintained all existing Market Information content and functionality\n\nCSS Layout Implementation:\n- Updated main container to use `grid-template-columns: 250px 1fr` for side panel layout\n- Created `.market-info-side-panel` with fixed width (250px), sticky positioning, and vertical flex layout\n- Added `.main-content-area` with 3-column grid for remaining sections\n- Implemented responsive breakpoints for different screen sizes\n\nResponsive Design:\n- Desktop (1024px+): Side panel with 250px width, main content in 3 columns\n- Tablet (900px-1023px): Reduced side panel to 220px with optimized fonts\n- Tablet (600px-899px): Side panel stacks above main content in single column\n- Mobile (480px-599px): Side panel becomes full-width section at top\n- Mobile (up to 479px): Optimized for smallest screens\n\nVisual Optimization:\n- Added sticky positioning for side panel on desktop\n- Implemented proper shadows and borders for visual separation\n- Optimized font sizes and spacing for narrow panel format\n- Added overflow handling for long content\n</info added on 2025-07-31T10:28:19.192Z>",
            "status": "done",
            "testStrategy": "Verify the side panel appears at the left, maintains fixed width, and all elements are vertically aligned and readable across screen sizes."
          },
          {
            "id": 2,
            "title": "Reorganize and Optimize Panel Content",
            "description": "Rearrange all Market Information features (price display, market trends, round history, market conditions, game controls) for vertical presentation, using smaller fonts and collapsible sections as needed to maximize space and maintain visibility of critical information.",
            "dependencies": [
              "27.1"
            ],
            "details": "Ensure all features from the original column are present and logically grouped. Implement collapsible or expandable sections for less critical information to optimize for the narrow format.\n<info added on 2025-07-31T10:55:33.597Z>\nContent reorganization and optimization improvements for the side panel:\n\n1. Added visual hierarchy with section icons (💰 for prices, 📊 for market conditions, 📈 for market tools)\n2. Shortened price labels for narrow panel format\n3. Implemented collapsible sections with proper ARIA attributes and toggle animations\n4. Optimized visual hierarchy with always-visible critical information and collapsible secondary content\n5. Added visual separation between sections using borders and backgrounds\n6. Implemented toggleCollapsibleSection() JavaScript method with ARIA state management\n7. Improved space efficiency through reduced gaps, optimized font sizes, and compact layout design\n8. Enhanced game control buttons with icons for better visual recognition\n\nAll original functionality maintained while providing a more organized and space-efficient layout.\n</info added on 2025-07-31T10:55:33.597Z>",
            "status": "done",
            "testStrategy": "Check that all features are present, accessible, and that critical information is always visible. Test collapsible sections for usability and accessibility."
          },
          {
            "id": 3,
            "title": "Implement Responsive and Accessible CSS",
            "description": "Update CSS grid and flexbox rules to support the new side panel layout, ensuring responsive behavior and accessibility across devices and screen sizes.",
            "dependencies": [
              "27.1",
              "27.2"
            ],
            "details": "Create specific styles for the side panel, including shadows or borders for separation, and ensure the panel adapts to different viewports. Use ARIA roles and keyboard navigation for accessibility.\n<info added on 2025-07-31T10:57:33.075Z>\nSuccessfully implemented comprehensive responsive and accessible CSS for the side panel with enhanced responsive design across all screen sizes, optimized font sizing and spacing, and improved collapsible section behavior for smaller screens. Added accessibility improvements including enhanced focus states, focus-visible support, ARIA attributes for screen readers, custom scrollbar styling, and high contrast mode support. Implemented visual feedback enhancements with hover effects, proper visual feedback for toggles, enhanced button focus states, and subtle animations with reduced motion support. Ensured cross-browser compatibility with webkit scrollbar styling, proper fallbacks, and consistent behavior across devices. Optimized performance with reduced motion support, efficient transitions, and minimal repaints. Applied mobile-first responsive design with optimized behavior for different orientations, enhanced touch targets, improved modal behavior, and proper stacking on mobile devices.\n</info added on 2025-07-31T10:57:33.075Z>",
            "status": "done",
            "testStrategy": "Test the side panel on various devices and browsers. Verify that the panel remains usable and visually consistent, and that accessibility features function as intended."
          },
          {
            "id": 4,
            "title": "Update JavaScript for DOM and Event Handling",
            "description": "Refactor JavaScript to update DOM references, event listeners, and any layout-dependent logic to match the new side panel structure, ensuring all interactive features remain functional.",
            "dependencies": [
              "27.3"
            ],
            "details": "Modify selectors, event bindings, and any animations or transitions related to Market Information elements to work with the new panel. Ensure all controls and dynamic updates function correctly.\n<info added on 2025-07-31T10:58:56.218Z>\nSuccessfully updated JavaScript for DOM and event handling to support the new side panel structure. The implementation includes enhanced initialization with proper ARIA state management and keyboard navigation support. Event handling has been improved with better accessibility compliance, focus management, and keyboard event listeners. Dynamic updates are now handled through dedicated methods for side panel elements, with optimized positioning for narrow panel layouts. Accessibility improvements include proper ARIA attributes, keyboard navigation, enhanced focus states, and state management for collapsible sections. Performance has been optimized through efficient DOM queries, minimal reflows, proper event delegation, and smooth animations with reduced motion support. Cross-browser compatibility ensures consistent behavior across different browsers and devices with appropriate fallbacks for unsupported features.\n</info added on 2025-07-31T10:58:56.218Z>",
            "status": "done",
            "testStrategy": "Test all interactive features (buttons, dynamic updates, transitions) to confirm they work as before. Check for errors or broken functionality after the layout change."
          },
          {
            "id": 5,
            "title": "Ensure Visual and Functional Consistency",
            "description": "Review and adjust the side panel to maintain visual consistency with the rest of the application, preserving color schemes, typography, data formats, and information hierarchy.",
            "dependencies": [
              "27.4"
            ],
            "details": "Compare the side panel with other UI components to ensure a unified look and feel. Confirm that all data displays and controls match the application's standards.\n<info added on 2025-07-31T11:00:38.005Z>\nSuccessfully ensured visual and functional consistency across the entire application with the following improvements:\n\n1. **Design System Integration:**\n   - Ensured side panel uses consistent CSS variables and design tokens\n   - Applied uniform typography with `var(--font-family-primary)` throughout\n   - Maintained consistent color scheme using established CSS variables\n   - Unified spacing and border radius using design system values\n\n2. **Visual Consistency:**\n   - Aligned side panel styling with main content sections (expenses, income, ledger)\n   - Applied consistent shadows, borders, and background colors\n   - Ensured uniform button styling across all components\n   - Maintained consistent focus states and hover effects\n\n3. **Typography Harmony:**\n   - Applied consistent font weights (600 for headings, 500 for buttons)\n   - Unified line heights and text colors across all components\n   - Ensured proper text hierarchy and readability\n   - Maintained consistent font sizes using design system variables\n\n4. **Interactive Element Consistency:**\n   - Unified button styling across side panel and main content\n   - Applied consistent focus states for all interactive elements\n   - Ensured uniform hover effects and transitions\n   - Maintained consistent spacing and padding patterns\n\n5. **Layout Integration:**\n   - Added proper spacing between side panel and main content\n   - Ensured visual separation while maintaining design unity\n   - Applied consistent border radius and shadow patterns\n   - Maintained proper alignment and visual hierarchy\n\n6. **Accessibility Consistency:**\n   - Applied uniform focus indicators across all interactive elements\n   - Ensured consistent keyboard navigation patterns\n   - Maintained proper ARIA attributes and screen reader support\n   - Applied consistent color contrast ratios throughout\n\nThe side panel now seamlessly integrates with the rest of the application while maintaining its distinct functionality and improved user experience.\n</info added on 2025-07-31T11:00:38.005Z>",
            "status": "done",
            "testStrategy": "Conduct a UI review for consistency. Validate that all interactive and display elements match the application's design system and that no regressions have occurred."
          }
        ]
      },
      {
        "id": 28,
        "title": "Move Flock Size and Housing Info to Prominent Sidebar Position",
        "description": "Relocate the flock's current size and housing information to the top of the far-left sidebar, ensuring it is visually prominent and clearly indicates both current flock size and housing capacity above the market information section.",
        "details": "1. Refactor the sidebar component to position flock size and housing capacity information at the very top, above all other sections, especially above the market information.\n2. Design this section with strong visual hierarchy: use larger font sizes, bold text, and clear icons to distinguish flock size and housing capacity. Consider using color highlights or badges to make the data stand out.\n3. Ensure the information is grouped logically and labeled clearly (e.g., 'Current Flock Size: 12 / Housing Capacity: 15').\n4. Maintain visual consistency with the rest of the UI, but use contrast and spacing to ensure prominence without overwhelming the sidebar.\n5. Make the sidebar responsive: ensure the information remains visible and prominent on various screen sizes, including tablets and mobile devices. Use a fixed or sticky sidebar if appropriate for the layout.\n6. Follow best practices for sidebar design: keep the sidebar width within 240–300px for expanded mode, and ensure the section remains clear and uncluttered[1][2][3].\n7. Update any relevant state management or data-binding logic to ensure flock size and housing capacity are always current and reactively updated.\n8. Conduct user testing or gather feedback from students to confirm the information is easily noticed and understood.",
        "testStrategy": "- Verify that flock size and housing capacity are always displayed at the top of the left sidebar, above market information, on all supported devices and screen sizes.\n- Check that the section uses larger, bold text and/or icons, and stands out visually from other sidebar content.\n- Confirm that the displayed values update reactively as the flock size or housing capacity changes during gameplay.\n- Test sidebar responsiveness: collapse/expand behavior, mobile and tablet layouts, and accessibility (screen reader labels, color contrast).\n- Solicit feedback from representative users (students) to ensure the information is prominent, clear, and not easily overlooked.",
        "status": "done",
        "dependencies": [
          1,
          2,
          4,
          11
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Refactor Sidebar Structure to Relocate Flock Info",
            "description": "Modify the sidebar component so that flock size and housing capacity information is positioned at the very top, above all other sections, especially above the market information.",
            "dependencies": [],
            "details": "Update the sidebar layout in the codebase, ensuring the flock size and housing capacity section is the first visible element in the far-left sidebar.",
            "status": "done",
            "testStrategy": "Verify that flock size and housing capacity are always displayed at the top of the sidebar, above market information, on all supported devices."
          },
          {
            "id": 2,
            "title": "Design Visually Prominent Flock Info Section",
            "description": "Apply strong visual hierarchy to the flock size and housing capacity section using larger font sizes, bold text, clear icons, and color highlights or badges to ensure prominence.",
            "dependencies": [
              "28.1"
            ],
            "details": "Use UI design principles such as contrast, spacing, and iconography to make the section stand out while maintaining consistency with the overall UI.",
            "status": "done",
            "testStrategy": "Check that the section uses larger, bold text and/or icons, and stands out visually from other sidebar content without overwhelming the sidebar."
          },
          {
            "id": 3,
            "title": "Ensure Logical Grouping and Clear Labeling",
            "description": "Group flock size and housing capacity information logically and label it clearly (e.g., 'Current Flock Size: 12 / Housing Capacity: 15') for immediate user comprehension.",
            "dependencies": [
              "28.2"
            ],
            "details": "Review and update labels, grouping, and formatting to maximize clarity and minimize cognitive load for users.",
            "status": "done",
            "testStrategy": "Confirm that the information is grouped and labeled in a way that is immediately understandable to users."
          },
          {
            "id": 4,
            "title": "Implement Responsive and Accessible Sidebar Design",
            "description": "Ensure the sidebar and flock info section remain visually prominent and accessible across all supported screen sizes and devices, using responsive layout techniques.",
            "dependencies": [
              "28.3"
            ],
            "details": "Apply responsive CSS and accessibility best practices so the section is always visible and prominent, including on tablets and mobile devices. Consider fixed or sticky positioning if appropriate.",
            "status": "done",
            "testStrategy": "Test the sidebar on various devices and screen sizes to verify that the flock info section remains prominent and accessible."
          },
          {
            "id": 5,
            "title": "Update Data Binding and Validate User Comprehension",
            "description": "Update state management or data-binding logic to ensure flock size and housing capacity are always current and reactively updated; conduct user testing or gather feedback to confirm the section is easily noticed and understood.",
            "dependencies": [
              "28.4"
            ],
            "details": "Integrate real-time data updates for flock size and housing capacity, and perform user testing or feedback sessions to validate the effectiveness of the new design.",
            "status": "done",
            "testStrategy": "Verify that the displayed values update reactively with state changes and that user feedback confirms the section is prominent and clear."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-29T07:14:38.071Z",
      "updated": "2025-07-31T11:10:56.620Z",
      "description": "Tasks for master context"
    }
  }
}